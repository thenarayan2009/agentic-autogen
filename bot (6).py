#!/usr/bin/env python3
import telebot
from telebot import types
import threading
import time
import requests
import json
import os
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any
from flask import Flask

BOT_TOKEN = "8262209791:AAG6Tpczt77ajbdPVnTrpCOyUOEOD0AHJHU"
ADMIN_ID = 5367009004

BOT_USERNAME = os.getenv("BOT_USERNAME", "Tasktoearnmoneybot")
MINIMUM_WITHDRAWAL = 10
REFERRAL_REWARD = 2
REFERRAL_MILESTONE_COUNT = 5
REFERRAL_MILESTONE_REWARD = 10
DEFAULT_WELCOME_BONUS = 5
USERS_DATA_FILE = "data/users_data.json"
BOT_DATA_FILE = "data/bot_data.json"
BLOCKED_USERS_FILE = "data/blocked_users.json"
ACTIVITY_LOG_FILE = "data/activity_log.json"
TASK_SUBMISSIONS_FILE = "data/task_submissions.json"

admin_state = {}

MESSAGES = {
    "hindi": {
        "welcome": """ЁЯОЙ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! Task Reward Bot рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!

ЁЯТ░ рдХрд╛рд░реНрдп рдкреВрд░реЗ рдХрд░реЗрдВ рдФрд░ рдкреИрд╕реЗ рдХрдорд╛рдПрдВ
ЁЯУ╕ рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬрдХрд░ рдХрд╛рд░реНрдп рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ
ЁЯТ╡ рдиреНрдпреВрдирддрдо рдирд┐рдХрд╛рд╕реА: тВ╣{min_withdrawal}
ЁЯФЧ рд░реЗрдлрд░ рдХрд░реЗрдВ рдФрд░ тВ╣{referral_reward} рдкреНрд░рддрд┐ рд░реЗрдлрд░рд▓ рдкрд╛рдПрдВ
ЁЯОБ рд╡реЗрд▓рдХрдо рдмреЛрдирд╕: тВ╣{welcome_bonus}

рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ:""",
        "help": """ЁЯУЪ рд╕рд╣рд╛рдпрддрд╛

ЁЯОп рдирдпрд╛ рдХрд╛рд░реНрдп: рдирдП рдХрд╛рд░реНрдп рджреЗрдЦреЗрдВ
ЁЯТ░ рдмреИрд▓реЗрдВрд╕: рдЕрдкрдирд╛ рдмреИрд▓реЗрдВрд╕ рдЪреЗрдХ рдХрд░реЗрдВ
ЁЯТ╕ рдирд┐рдХрд╛рд╕реА: рдкреИрд╕реЗ рдирд┐рдХрд╛рд▓реЗрдВ (рдиреНрдпреВрдирддрдо тВ╣{min_withdrawal})
ЁЯФЧ рд░реЗрдлрд░: рджреЛрд╕реНрддреЛрдВ рдХреЛ рд░реЗрдлрд░ рдХрд░реЗрдВ
тЭУ рд╕рд╣рд╛рдпрддрд╛: рдпрд╣ рдореЗрд╕реЗрдЬ

тЪая╕П рдорд╣рддреНрд╡рдкреВрд░реНрдг рдирд┐рдпрдо:
тАв рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬреЗрдВ
тАв рдирдХрд▓реА рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рд╕реЗ рдмреИрди рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ
тАв рдПрдХ рдХрд╛рд░реНрдп рдХреЗрд╡рд▓ рдПрдХ рдмрд╛рд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ

ЁЯУЮ рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдПрдбрдорд┐рди рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ""",
        "btn_new_task": "ЁЯОп рдирдпрд╛ рдХрд╛рд░реНрдп",
        "btn_balance": "ЁЯТ░ рдмреИрд▓реЗрдВрд╕",
        "btn_withdrawal": "ЁЯТ╕ рдирд┐рдХрд╛рд╕реА",
        "btn_refer": "ЁЯФЧ рд░реЗрдлрд░",
        "btn_help": "тЭУ рд╕рд╣рд╛рдпрддрд╛",
        "btn_language": "ЁЯМР рднрд╛рд╖рд╛",
        "no_tasks": "тЭМ рдХреЛрдИ рдХрд╛рд░реНрдп рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ\nтП│ рдирдП рдХрд╛рд░реНрдп рдХреЗ рд▓рд┐рдП рдмрд╛рдж рдореЗрдВ рдЖрдПрдВ",
        "task_already_active": "тЪая╕П рдЖрдкрдХрд╛ рдХрд╛рд░реНрдп рдкрд╣рд▓реЗ рд╕реЗ рдЪрд╛рд▓реВ рд╣реИ\nЁЯУ╕ рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬреЗрдВ рдпрд╛ /newtask рджрдмрд╛рдПрдВ",
        "task_assigned": "тЬЕ рдХрд╛рд░реНрдп рд╕реМрдВрдкрд╛ рдЧрдпрд╛!\n\nЁЯУЛ рдХрд╛рд░реНрдп: {title}\nЁЯУЭ рд╡рд┐рд╡рд░рдг: {description}\nЁЯМР рд▓рд┐рдВрдХ: {link}\nЁЯТ░ рд░рд┐рд╡рд╛рд░реНрдб: тВ╣{reward}\n\nЁЯУ╕ рдХрд╛рд░реНрдп рдкреВрд░рд╛ рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬреЗрдВ",
        "balance_info": "ЁЯТ░ рдЖрдкрдХрд╛ рдмреИрд▓реЗрдВрд╕\n\nЁЯТ╡ рдЙрдкрд▓рдмреНрдз рдмреИрд▓реЗрдВрд╕: тВ╣{balance}\nЁЯУК рдХреБрд▓ рдХрдорд╛рдИ: тВ╣{total_earnings}\nЁЯОп рдкреВрд░реНрдг рдХрд╛рд░реНрдп: {completed_tasks}\nЁЯФЧ рд░реЗрдлрд░рд▓реНрд╕: {referrals}",
        "insufficient_balance": "тЭМ рдЕрдкрд░реНрдпрд╛рдкреНрдд рдмреИрд▓реЗрдВрд╕\nЁЯТ░ рдЖрдкрдХрд╛ рдмреИрд▓реЗрдВрд╕: тВ╣{balance}\nЁЯТ╕ рдиреНрдпреВрдирддрдо рдирд┐рдХрд╛рд╕реА: тВ╣{min_withdrawal}",
        "enter_upi": "ЁЯТ│ рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ UPI ID рднреЗрдЬреЗрдВ\nрдЙрджрд╛рд╣рд░рдг: 9876543210@paytm",
        "withdrawal_submitted": "тЬЕ рдирд┐рдХрд╛рд╕реА рдЕрдиреБрд░реЛрдз рднреЗрдЬрд╛ рдЧрдпрд╛\nтП│ рдПрдбрдорд┐рди рджреНрд╡рд╛рд░рд╛ рд╕рддреНрдпрд╛рдкрди рдХреА рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ\nЁЯТ░ рд░рд╛рд╢рд┐: тВ╣{amount}\nЁЯПж UPI: {upi_id}",
        "referral_info": """ЁЯФЧ рдЖрдкрдХрд╛ рд░реЗрдлрд░рд▓ рд▓рд┐рдВрдХ

{referral_link}

ЁЯУК рдЖрдВрдХрдбрд╝реЗ:
ЁЯФЧ рдХреБрд▓ рд░реЗрдлрд░рд▓реНрд╕: {referrals_count}
ЁЯТ░ рд░реЗрдлрд░рд▓ рдХрдорд╛рдИ: тВ╣{referral_earnings}

ЁЯОБ рд░реЗрдлрд░рд▓ рд░рд┐рд╡рд╛рд░реНрдб:
тАв рдкреНрд░рддреНрдпреЗрдХ рд░реЗрдлрд░рд▓: тВ╣{referral_reward}
тАв {milestone_count} рд░реЗрдлрд░рд▓ рдкрд░ рдмреЛрдирд╕: тВ╣{milestone_reward}

ЁЯТб рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЗ рд╕рд╛рде рд▓рд┐рдВрдХ рд╢реЗрдпрд░ рдХрд░реЗрдВ!""",
        "no_active_task": "тЭМ рдХреЛрдИ рд╕рдХреНрд░рд┐рдп рдХрд╛рд░реНрдп рдирд╣реАрдВ\nЁЯОп рдкрд╣рд▓реЗ /newtask рджрдмрд╛рдПрдВ",
        "screenshot_submitted": "тЬЕ рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬрд╛ рдЧрдпрд╛\nтП│ рд╕рддреНрдпрд╛рдкрди рдХреЗ рд▓рд┐рдП рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ\nЁЯУЭ рдПрдбрдорд┐рди рдЬрд▓реНрдж рд╣реА рдЖрдкрдХреЗ рдХрд╛рд░реНрдп рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВрдЧреЗ",
        "user_blocked": "ЁЯЪл рдЖрдк рдЗрд╕ рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ",
        "start_first": "тЭМ рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ /start рджрдмрд╛рдПрдВ",
        "invalid_format": "тЭМ рдЧрд▓рдд рдлреЙрд░реНрдореЗрдЯред рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред",
        "select_language": "ЁЯМР рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ\nSelect Language:",
        "language_changed": "тЬЕ рднрд╛рд╖рд╛ рдмрджрд▓реА рдЧрдИ!",
        "menu_text": "ЁЯУЛ рдореЗрдиреВ рдХреЗ рд▓рд┐рдП /start рджрдмрд╛рдПрдВ рдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
        "welcome_bonus_received": "ЁЯОБ рд╡реЗрд▓рдХрдо рдмреЛрдирд╕!\n\nЁЯТ░ рдЖрдкрдХреЛ тВ╣{amount} рдХрд╛ рд╡реЗрд▓рдХрдо рдмреЛрдирд╕ рдорд┐рд▓рд╛ рд╣реИ!",
        "task_approved": "тЬЕ рдХрд╛рд░реНрдп рд╕реНрд╡реАрдХреГрдд!\n\nЁЯУЛ рдХрд╛рд░реНрдп: {title}\nЁЯТ░ рд░рд┐рд╡рд╛рд░реНрдб: тВ╣{reward}\nЁЯТ╡ рдирдпрд╛ рдмреИрд▓реЗрдВрд╕: тВ╣{balance}",
        "task_rejected": "тЭМ рдХрд╛рд░реНрдп рдЕрд╕реНрд╡реАрдХреГрдд\n\nЁЯУЛ рдХрд╛рд░реНрдп: {title}\nЁЯУЭ рдХрд╛рд░рдг: {reason}\n\nЁЯФД рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ",
        "task_limit_reached": "тЪая╕П рдпрд╣ рдХрд╛рд░реНрдп рдкреВрд░рд╛ рд╣реЛ рдЧрдпрд╛ рд╣реИ\nЁЯУК рдХрд╛рд░реНрдп рдкреВрд░реНрдг: {assigned}/{quantity}\n\nЁЯОп рдЕрдиреНрдп рдХрд╛рд░реНрдп рджреЗрдЦреЗрдВ: /newtask"
    },
    "english": {
        "welcome": """ЁЯОЙ Welcome to Task Reward Bot!

ЁЯТ░ Complete tasks and earn money
ЁЯУ╕ Submit screenshots to verify tasks
ЁЯТ╡ Minimum withdrawal: тВ╣{min_withdrawal}
ЁЯФЧ Refer friends and earn тВ╣{referral_reward} per referral
ЁЯОБ Welcome Bonus: тВ╣{welcome_bonus}

Use the buttons below:""",
        "help": """ЁЯУЪ Help

ЁЯОп New Task: View available tasks
ЁЯТ░ Balance: Check your balance
ЁЯТ╕ Withdrawal: Withdraw money (minimum тВ╣{min_withdrawal})
ЁЯФЧ Refer: Refer friends
тЭУ Help: This message

тЪая╕П Important Rules:
тАв Submit real screenshots
тАв Fake screenshots will result in ban
тАв Each task can only be completed once

ЁЯУЮ Contact admin for support""",
        "btn_new_task": "ЁЯОп New Task",
        "btn_balance": "ЁЯТ░ Balance",
        "btn_withdrawal": "ЁЯТ╕ Withdrawal",
        "btn_refer": "ЁЯФЧ Refer",
        "btn_help": "тЭУ Help",
        "btn_language": "ЁЯМР Language",
        "no_tasks": "тЭМ No tasks available\nтП│ Check back later for new tasks",
        "task_already_active": "тЪая╕П You already have an active task\nЁЯУ╕ Submit screenshot or press /newtask",
        "task_assigned": "тЬЕ Task assigned!\n\nЁЯУЛ Task: {title}\nЁЯУЭ Description: {description}\nЁЯМР Link: {link}\nЁЯТ░ Reward: тВ╣{reward}\n\nЁЯУ╕ Submit screenshot after completing the task",
        "balance_info": "ЁЯТ░ Your Balance\n\nЁЯТ╡ Available Balance: тВ╣{balance}\nЁЯУК Total Earnings: тВ╣{total_earnings}\nЁЯОп Completed Tasks: {completed_tasks}\nЁЯФЧ Referrals: {referrals}",
        "insufficient_balance": "тЭМ Insufficient balance\nЁЯТ░ Your balance: тВ╣{balance}\nЁЯТ╕ Minimum withdrawal: тВ╣{min_withdrawal}",
        "enter_upi": "ЁЯТ│ Please send your UPI ID\nExample: 9876543210@paytm",
        "withdrawal_submitted": "тЬЕ Withdrawal request submitted\nтП│ Wait for admin verification\nЁЯТ░ Amount: тВ╣{amount}\nЁЯПж UPI: {upi_id}",
        "referral_info": """ЁЯФЧ Your Referral Link

{referral_link}

ЁЯУК Statistics:
ЁЯФЧ Total Referrals: {referrals_count}
ЁЯТ░ Referral Earnings: тВ╣{referral_earnings}

ЁЯОБ Referral Rewards:
тАв Each referral: тВ╣{referral_reward}
тАв Bonus at {milestone_count} referrals: тВ╣{milestone_reward}

ЁЯТб Share the link with your friends!""",
        "no_active_task": "тЭМ No active task\nЁЯОп Press /newtask first",
        "screenshot_submitted": "тЬЕ Screenshot submitted\nтП│ Waiting for verification\nЁЯУЭ Admin will verify your task soon",
        "user_blocked": "ЁЯЪл You are blocked from using this bot",
        "start_first": "тЭМ Please press /start first",
        "invalid_format": "тЭМ Invalid format. Please use correct format.",
        "select_language": "ЁЯМР Select Language\nрднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
        "language_changed": "тЬЕ Language changed!",
        "menu_text": "ЁЯУЛ Press /start for menu or use the buttons below",
        "welcome_bonus_received": "ЁЯОБ Welcome Bonus!\n\nЁЯТ░ You received тВ╣{amount} as welcome bonus!",
        "task_approved": "тЬЕ Task Approved!\n\nЁЯУЛ Task: {title}\nЁЯТ░ Reward: тВ╣{reward}\nЁЯТ╡ New Balance: тВ╣{balance}",
        "task_rejected": "тЭМ Task Rejected\n\nЁЯУЛ Task: {title}\nЁЯУЭ Reason: {reason}\n\nЁЯФД Please try again",
        "task_limit_reached": "тЪая╕П This task is full\nЁЯУК Task Completed: {assigned}/{quantity}\n\nЁЯОп Try other tasks: /newtask"
    }
}

def get_message(user_language, key, **kwargs):
    if user_language not in MESSAGES:
        user_language = "hindi"
    message = MESSAGES[user_language].get(key, MESSAGES["hindi"].get(key, "Message not found"))
    if kwargs:
        try:
            return message.format(**kwargs)
        except:
            return message
    return message

def get_language_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    hindi_btn = types.InlineKeyboardButton("ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА", callback_data="lang_hindi")
    english_btn = types.InlineKeyboardButton("ЁЯЗмЁЯЗз English", callback_data="lang_english")
    keyboard.add(hindi_btn, english_btn)
    return keyboard

def ensure_data_directory():
    if not os.path.exists("data"):
        os.makedirs("data")

def initialize_data_files():
    ensure_data_directory()
    if not os.path.exists(USERS_DATA_FILE):
        with open(USERS_DATA_FILE, 'w') as f:
            json.dump({}, f)
    if not os.path.exists(BOT_DATA_FILE):
        initial_data = {
            "tasks": [],
            "withdrawal_requests": [],
            "settings": {
                "min_withdrawal": MINIMUM_WITHDRAWAL,
                "referral_reward": REFERRAL_REWARD,
                "default_welcome_bonus": DEFAULT_WELCOME_BONUS,
                "referral_milestone_count": REFERRAL_MILESTONE_COUNT,
                "referral_milestone_reward": REFERRAL_MILESTONE_REWARD
            }
        }
        with open(BOT_DATA_FILE, 'w') as f:
            json.dump(initial_data, f, indent=2)
    if not os.path.exists(BLOCKED_USERS_FILE):
        with open(BLOCKED_USERS_FILE, 'w') as f:
            json.dump([], f)
    if not os.path.exists(ACTIVITY_LOG_FILE):
        with open(ACTIVITY_LOG_FILE, 'w') as f:
            json.dump([], f)
    if not os.path.exists(TASK_SUBMISSIONS_FILE):
        with open(TASK_SUBMISSIONS_FILE, 'w') as f:
            json.dump([], f)

def load_json_file(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {} if filepath in [USERS_DATA_FILE] else []

def save_json_file(filepath, data):
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    except:
        return False

def get_all_users_data():
    return load_json_file(USERS_DATA_FILE)

def get_user_data(user_id):
    users_data = get_all_users_data()
    return users_data.get(str(user_id), {})

def user_exists(user_id):
    users_data = get_all_users_data()
    return str(user_id) in users_data

def create_user(user_id, first_name, username, referrer_id=None):
    users_data = get_all_users_data()
    bot_data = get_bot_data()
    settings = bot_data.get("settings", {})
    default_welcome_bonus = settings.get("default_welcome_bonus", DEFAULT_WELCOME_BONUS)
    
    user_data = {
        "id": user_id,
        "first_name": first_name,
        "username": username,
        "balance": 0,
        "total_earnings": 0,
        "completed_tasks": [],
        "referrals": 0,
        "referred_by": referrer_id,
        "joined_at": time.time(),
        "current_task": None,
        "language": "hindi",
        "custom_settings": {
            "referral_reward": None,
            "milestone_count": None,
            "milestone_reward": None,
            "welcome_bonus": default_welcome_bonus
        }
    }
    users_data[str(user_id)] = user_data
    save_json_file(USERS_DATA_FILE, users_data)

def get_user_custom_setting(user_id, setting_key, default_value):
    user_data = get_user_data(user_id)
    if user_data and "custom_settings" in user_data:
        custom_value = user_data["custom_settings"].get(setting_key)
        if custom_value is not None:
            return custom_value
    return default_value

def set_user_custom_setting(user_id, setting_key, value):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        if "custom_settings" not in users_data[str(user_id)]:
            users_data[str(user_id)]["custom_settings"] = {}
        users_data[str(user_id)]["custom_settings"][setting_key] = value
        save_json_file(USERS_DATA_FILE, users_data)
        return True
    return False

def add_user_balance(user_id, amount):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        users_data[str(user_id)]["balance"] = users_data[str(user_id)].get("balance", 0) + amount
        users_data[str(user_id)]["total_earnings"] = users_data[str(user_id)].get("total_earnings", 0) + amount
        save_json_file(USERS_DATA_FILE, users_data)

def deduct_user_balance(user_id, amount):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        current_balance = users_data[str(user_id)].get("balance", 0)
        new_balance = max(0, current_balance - amount)
        users_data[str(user_id)]["balance"] = new_balance
        save_json_file(USERS_DATA_FILE, users_data)

def add_completed_task(user_id, task_id):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        completed_tasks = users_data[str(user_id)].get("completed_tasks", [])
        if task_id not in completed_tasks:
            completed_tasks.append(task_id)
            users_data[str(user_id)]["completed_tasks"] = completed_tasks
            save_json_file(USERS_DATA_FILE, users_data)

def increment_user_referrals(user_id):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        users_data[str(user_id)]["referrals"] = users_data[str(user_id)].get("referrals", 0) + 1
        save_json_file(USERS_DATA_FILE, users_data)

def set_user_current_task(user_id, task_id):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        users_data[str(user_id)]["current_task"] = task_id
        save_json_file(USERS_DATA_FILE, users_data)

def clear_user_current_task(user_id):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        users_data[str(user_id)]["current_task"] = None
        save_json_file(USERS_DATA_FILE, users_data)

def get_bot_data():
    return load_json_file(BOT_DATA_FILE)

def save_bot_data(data):
    save_json_file(BOT_DATA_FILE, data)

def add_withdrawal_request(request):
    bot_data = get_bot_data()
    if "withdrawal_requests" not in bot_data:
        bot_data["withdrawal_requests"] = []
    bot_data["withdrawal_requests"].append(request)
    save_bot_data(bot_data)

def add_task(task):
    bot_data = get_bot_data()
    if "tasks" not in bot_data:
        bot_data["tasks"] = []
    bot_data["tasks"].append(task)
    save_bot_data(bot_data)

def get_blocked_users():
    return load_json_file(BLOCKED_USERS_FILE)

def is_user_blocked(user_id):
    blocked_users = get_blocked_users()
    return user_id in blocked_users

def block_user(user_id):
    blocked_users = get_blocked_users()
    if user_id not in blocked_users:
        blocked_users.append(user_id)
        save_json_file(BLOCKED_USERS_FILE, blocked_users)

def unblock_user(user_id):
    blocked_users = get_blocked_users()
    if user_id in blocked_users:
        blocked_users.remove(user_id)
        save_json_file(BLOCKED_USERS_FILE, blocked_users)

def update_withdrawal_request_status(request_id, status):
    bot_data = get_bot_data()
    withdrawal_requests = bot_data.get("withdrawal_requests", [])
    for request in withdrawal_requests:
        if request["id"] == request_id:
            request["status"] = status
            request["processed_at"] = time.time()
            break
    save_bot_data(bot_data)

def get_user_language(user_id):
    user_data = get_user_data(user_id)
    if user_data:
        return user_data.get("language", "hindi")
    return "hindi"

def set_user_language(user_id, language):
    users_data = get_all_users_data()
    if str(user_id) in users_data:
        users_data[str(user_id)]["language"] = language
        save_json_file(USERS_DATA_FILE, users_data)

def log_activity(user_id, action, data=None):
    try:
        try:
            with open(ACTIVITY_LOG_FILE, 'r', encoding='utf-8') as f:
                logs = json.load(f)
        except:
            logs = []
        log_entry = {
            "timestamp": time.time(),
            "user_id": user_id,
            "action": action,
            "data": data or {},
            "datetime": time.strftime('%Y-%m-%d %H:%M:%S')
        }
        logs.append(log_entry)
        if len(logs) > 10000:
            logs = logs[-10000:]
        with open(ACTIVITY_LOG_FILE, 'w', encoding='utf-8') as f:
            json.dump(logs, f, indent=2, ensure_ascii=False)
        return True
    except Exception as e:
        print(f"Logging error: {e}")
        return False

def broadcast_notification(message_text, exclude_user_id=None):
    """Send notification to all active users"""
    users_data = get_all_users_data()
    success_count = 0
    failed_count = 0
    
    for user_id_str, user_data in users_data.items():
        user_id = int(user_id_str)
        if exclude_user_id and user_id == exclude_user_id:
            continue
        if is_user_blocked(user_id):
            continue
        
        try:
            bot.send_message(user_id, message_text, parse_mode='Markdown')
            success_count += 1
            time.sleep(0.05)
        except Exception as e:
            failed_count += 1
            print(f"Broadcast failed for {user_id}: {e}")
    
    return success_count, failed_count

app = Flask(__name__)

@app.route('/')
def home():
    return """<!DOCTYPE html>
<html>
<head><title>Telegram Task Bot</title><meta charset="utf-8"><meta name="viewport" content="width=device-width, initial-scale=1">
<style>body{font-family:Arial,sans-serif;margin:0;padding:20px;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:white;text-align:center;min-height:100vh;display:flex;flex-direction:column;justify-content:center;align-items:center}.container{background:rgba(255,255,255,0.1);padding:40px;border-radius:20px;backdrop-filter:blur(10px);box-shadow:0 8px 32px rgba(0,0,0,0.1);max-width:500px}.status{font-size:24px;margin-bottom:20px}.emoji{font-size:64px;margin-bottom:20px}.info{font-size:16px;opacity:0.8;line-height:1.6}.pulse{animation:pulse 2s infinite}@keyframes pulse{0%{transform:scale(1)}50%{transform:scale(1.05)}100%{transform:scale(1)}}</style>
</head>
<body><div class="container"><div class="emoji pulse">ЁЯдЦ</div><div class="status">Telegram Task Bot is Running!</div>
<div class="info"><p>тЬЕ Bot Status: Online 24/7</p><p>ЁЯХР Server Time: """ + time.strftime('%Y-%m-%d %H:%M:%S UTC') + """</p><p>ЁЯЪА Ready to serve users</p><p>ЁЯФД Auto-restart enabled</p></div></div></body></html>"""

@app.route('/ping')
def ping():
    return "Bot is alive!"

@app.route('/health')
def health():
    return {"status": "UP", "service": "telegram-bot"}

@app.route('/alive')
def alive():
    return "UP"

@app.route('/status')
def status():
    return {"status": "online", "message": "ЁЯдЦ Bot is alive!", "timestamp": time.strftime('%Y-%m-%d %H:%M:%S UTC'), "uptime": "24/7", "deployment": "stable"}

def run_server():
    try:
        app.run(host='0.0.0.0', port=5000, debug=False, use_reloader=False)
    except Exception as e:
        print(f"тЭМ Keep-alive server error: {e}")

def keep_alive():
    server_thread = threading.Thread(target=run_server)
    server_thread.daemon = True
    server_thread.start()
    print("ЁЯМР Keep-alive server started on port 5000")

bot = telebot.TeleBot(BOT_TOKEN)

initialize_data_files()

@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    if is_user_blocked(user_id):
        bot.reply_to(message, "ЁЯЪл рдЖрдк рдЗрд╕ рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рдХрд░ рд╕рдХрддреЗ / You are blocked from using this bot")
        return
    
    is_new_user = False
    if not user_exists(user_id):
        is_new_user = True
        referrer_id = None
        if len(message.text.split()) > 1:
            try:
                referrer_id = int(message.text.split()[1])
                if user_exists(referrer_id) and referrer_id != user_id:
                    bot_data = get_bot_data()
                    settings = bot_data.get("settings", {})
                    
                    referrer_custom_reward = get_user_custom_setting(referrer_id, "referral_reward", None)
                    if referrer_custom_reward is not None:
                        referral_reward = referrer_custom_reward
                    else:
                        referral_reward = settings.get("referral_reward", REFERRAL_REWARD)
                    
                    referrer_custom_milestone_count = get_user_custom_setting(referrer_id, "milestone_count", None)
                    if referrer_custom_milestone_count is not None:
                        milestone_count = referrer_custom_milestone_count
                    else:
                        milestone_count = settings.get("referral_milestone_count", REFERRAL_MILESTONE_COUNT)
                    
                    referrer_custom_milestone_reward = get_user_custom_setting(referrer_id, "milestone_reward", None)
                    if referrer_custom_milestone_reward is not None:
                        milestone_reward = referrer_custom_milestone_reward
                    else:
                        milestone_reward = settings.get("referral_milestone_reward", REFERRAL_MILESTONE_REWARD)
                    
                    add_user_balance(referrer_id, referral_reward)
                    increment_user_referrals(referrer_id)
                    updated_referrer_data = get_user_data(referrer_id)
                    new_referral_count = updated_referrer_data['referrals']
                    
                    if new_referral_count % milestone_count == 0:
                        add_user_balance(referrer_id, milestone_reward)
                        bot.send_message(referrer_id, f"ЁЯОЙ Milestone Bonus!\n\nрдЖрдкрдиреЗ {milestone_count} referrals complete рдХрд┐рдП рд╣реИрдВ!\nрдмреЛрдирд╕: тВ╣{milestone_reward}")
                    
                    bot.send_message(referrer_id, f"ЁЯОЙ New Referral!\n\nрдЖрдкрдХреЗ рд░реЗрдлрд░рд▓ рд╕реЗ рдПрдХ рдирдпрд╛ user join рд╣реБрдЖ!\nрд░рд┐рд╡реЙрд░реНрдб: тВ╣{referral_reward}\nрдХреБрд▓ рд░реЗрдлрд░рд▓реНрд╕: {new_referral_count}")
                    log_activity(referrer_id, "referral_earned", {"referred_user": user_id, "reward": referral_reward, "total_referrals": new_referral_count})
            except:
                referrer_id = None
        
        create_user(user_id, message.from_user.first_name, message.from_user.username, referrer_id)
        
        welcome_bonus = get_user_custom_setting(user_id, "welcome_bonus", DEFAULT_WELCOME_BONUS)
        if welcome_bonus > 0:
            add_user_balance(user_id, welcome_bonus)
            user_language = get_user_language(user_id)
            bot.send_message(user_id, get_message(user_language, "welcome_bonus_received", amount=welcome_bonus))
            log_activity(user_id, "welcome_bonus_received", {"amount": welcome_bonus})
        
        log_activity(user_id, "user_registered", {"referrer": referrer_id})
    
    user_language = get_user_language(user_id)
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
    btn1 = types.KeyboardButton(get_message(user_language, "btn_new_task"))
    btn2 = types.KeyboardButton(get_message(user_language, "btn_balance"))
    btn3 = types.KeyboardButton(get_message(user_language, "btn_withdrawal"))
    btn4 = types.KeyboardButton(get_message(user_language, "btn_refer"))
    btn5 = types.KeyboardButton(get_message(user_language, "btn_help"))
    btn6 = types.KeyboardButton(get_message(user_language, "btn_language"))
    keyboard.add(btn1, btn2)
    keyboard.add(btn3, btn4)
    keyboard.add(btn5, btn6)
    
    bot_data = get_bot_data()
    settings = bot_data.get("settings", {})
    min_withdrawal = settings.get("min_withdrawal", MINIMUM_WITHDRAWAL)
    referral_reward = settings.get("referral_reward", REFERRAL_REWARD)
    welcome_bonus = settings.get("default_welcome_bonus", DEFAULT_WELCOME_BONUS)
    
    welcome_msg = get_message(user_language, "welcome", min_withdrawal=min_withdrawal, referral_reward=referral_reward, welcome_bonus=welcome_bonus)
    bot.reply_to(message, welcome_msg, reply_markup=keyboard)
    log_activity(user_id, "start_command", {})

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("ЁЯТ╕ Withdrawal Requests", callback_data="admin_withdrawals")
    btn2 = types.InlineKeyboardButton("ЁЯОп Manage Tasks", callback_data="admin_tasks")
    btn3 = types.InlineKeyboardButton("ЁЯУК User Statistics", callback_data="admin_stats")
    btn4 = types.InlineKeyboardButton("ЁЯТ░ Adjust Balance", callback_data="admin_adjust_balance")
    btn5 = types.InlineKeyboardButton("ЁЯЪл Block/Unblock User", callback_data="admin_block_user")
    btn6 = types.InlineKeyboardButton("ЁЯУи Message Center", callback_data="admin_message_center")
    btn7 = types.InlineKeyboardButton("ЁЯФЧ Referral Settings", callback_data="admin_referral_settings")
    btn8 = types.InlineKeyboardButton("тЪЩя╕П Bot Settings", callback_data="admin_global_settings")
    refresh_btn = types.InlineKeyboardButton("ЁЯФД Refresh Panel", callback_data="admin_refresh")
    
    keyboard.add(btn1, btn2)
    keyboard.add(btn3, btn4)
    keyboard.add(btn5, btn6)
    keyboard.add(btn7, btn8)
    keyboard.add(refresh_btn)
    
    admin_msg = """ЁЯФз **Admin Panel**

Select an option:

ЁЯТ╕ Withdrawal Requests - Manage user withdrawals
ЁЯОп Manage Tasks - Add/Edit tasks
ЁЯУК User Statistics - View all user stats
ЁЯТ░ Adjust Balance - Add/deduct user balance
ЁЯЪл Block/Unblock - Block or unblock users
ЁЯУи Message Center - Broadcast messages
ЁЯФЧ Referral Settings - Per-user referral settings
тЪЩя╕П Bot Settings - Global bot settings
ЁЯФД Refresh Panel - Refresh this panel"""
    
    bot.send_message(ADMIN_ID, admin_msg, reply_markup=keyboard, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_callbacks(call):
    if call.from_user.id != ADMIN_ID:
        return
    
    if call.data == "admin_users_list":
        users_data = get_all_users_data()
        total_users = len(users_data)
        
        if total_users == 0:
            bot.edit_message_text("тЭМ рдХреЛрдИ user рдирд╣реАрдВ рд╣реИ", call.message.chat.id, call.message.message_id)
            return
        
        page = 0
        users_per_page = 10
        show_users_page(call.message.chat.id, call.message.message_id, page, users_per_page)
    
    elif call.data == "admin_stats":
        show_users_page(call.message.chat.id, call.message.message_id, 0, 10)
    
    elif call.data == "admin_referral_settings":
        msg = bot.edit_message_text("ЁЯФН User ID enter рдХрд░реЗрдВ рдЬрд┐рд╕рдХреЗ referral settings change рдХрд░рдиреЗ рд╣реИрдВ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "search_user_for_referral", "message_id": msg.message_id}
    
    elif call.data == "admin_adjust_balance":
        msg = bot.edit_message_text("ЁЯФН User ID enter рдХрд░реЗрдВ рдЬрд┐рд╕рдХрд╛ balance adjust рдХрд░рдирд╛ рд╣реИ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "search_user_for_balance", "message_id": msg.message_id}
    
    elif call.data == "admin_block_user":
        msg = bot.edit_message_text("ЁЯФН User ID enter рдХрд░реЗрдВ рдЬрд┐рд╕реЗ block/unblock рдХрд░рдирд╛ рд╣реИ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "search_user_for_block", "message_id": msg.message_id}
    
    elif call.data == "admin_withdrawals":
        bot_data = get_bot_data()
        withdrawal_requests = bot_data.get("withdrawal_requests", [])
        pending = [w for w in withdrawal_requests if w.get("status") == "pending"]
        
        if not pending:
            keyboard = types.InlineKeyboardMarkup()
            back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
            keyboard.add(back_btn)
            bot.edit_message_text("тЬЕ рдХреЛрдИ pending withdrawal рдирд╣реАрдВ рд╣реИ", call.message.chat.id, call.message.message_id, reply_markup=keyboard)
            return
        
        msg = f"ЁЯТ╕ **Pending Withdrawals** ({len(pending)})\n\n"
        for w in pending[:5]:
            msg += f"User: {w['user_id']}\nAmount: тВ╣{w['amount']}\nUPI: {w['upi_id']}\n\n"
        
        keyboard = types.InlineKeyboardMarkup()
        back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
        keyboard.add(back_btn)
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif call.data == "admin_tasks":
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        msg = f"ЁЯОп **Task Management**\n\nЁЯУЛ Total Tasks: {len(tasks)}\n\n"
        
        if tasks:
            active_tasks = [t for t in tasks if t.get("active", True)]
            inactive_tasks = [t for t in tasks if not t.get("active", True)]
            msg += f"тЬЕ Active: {len(active_tasks)}\nтЭМ Inactive: {len(inactive_tasks)}\n\n"
            
            for i, task in enumerate(tasks[:5], 1):
                status = "тЬЕ" if task.get("active", True) else "тЭМ"
                completed = task.get("completed_count", 0)
                quantity = task.get("quantity", 999999)
                msg += f"{i}. {status} {task['title']}\n   Reward: тВ╣{task['reward']} | Done: {completed}/{quantity}\n\n"
        else:
            msg += "тЪая╕П No tasks available\n\n"
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        add_btn = types.InlineKeyboardButton("тЮХ Add New Task", callback_data="admin_task_add")
        if tasks:
            view_btn = types.InlineKeyboardButton("ЁЯУЛ View All Tasks", callback_data="admin_task_view_0")
            keyboard.add(add_btn, view_btn)
        else:
            keyboard.add(add_btn)
        back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
        keyboard.add(back_btn)
        
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif call.data == "admin_message_center":
        msg = """ЁЯУи **Message Center**

Choose message type:

ЁЯСд **Single User** - Send message to specific user
ЁЯУв **Broadcast** - Send message to all users"""
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("ЁЯСд Send to Single User", callback_data="admin_msg_single")
        btn2 = types.InlineKeyboardButton("ЁЯУв Broadcast to All Users", callback_data="admin_msg_broadcast")
        back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
        keyboard.add(btn1, btn2, back_btn)
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif call.data == "admin_refresh":
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton("ЁЯТ╕ Withdrawal Requests", callback_data="admin_withdrawals")
        btn2 = types.InlineKeyboardButton("ЁЯОп Manage Tasks", callback_data="admin_tasks")
        btn3 = types.InlineKeyboardButton("ЁЯУК User Statistics", callback_data="admin_stats")
        btn4 = types.InlineKeyboardButton("ЁЯТ░ Adjust Balance", callback_data="admin_adjust_balance")
        btn5 = types.InlineKeyboardButton("ЁЯЪл Block/Unblock User", callback_data="admin_block_user")
        btn6 = types.InlineKeyboardButton("ЁЯУи Message Center", callback_data="admin_message_center")
        btn7 = types.InlineKeyboardButton("ЁЯФЧ Referral Settings", callback_data="admin_referral_settings")
        btn8 = types.InlineKeyboardButton("тЪЩя╕П Bot Settings", callback_data="admin_global_settings")
        refresh_btn = types.InlineKeyboardButton("ЁЯФД Refresh Panel", callback_data="admin_refresh")
        
        keyboard.add(btn1, btn2)
        keyboard.add(btn3, btn4)
        keyboard.add(btn5, btn6)
        keyboard.add(btn7, btn8)
        keyboard.add(refresh_btn)
        
        admin_msg = """ЁЯФз **Admin Panel**

Select an option:

ЁЯТ╕ Withdrawal Requests - Manage user withdrawals
ЁЯОп Manage Tasks - Add/Edit tasks
ЁЯУК User Statistics - View all user stats
ЁЯТ░ Adjust Balance - Add/deduct user balance
ЁЯЪл Block/Unblock - Block or unblock users
ЁЯУи Message Center - Broadcast messages
ЁЯФЧ Referral Settings - Per-user referral settings
тЪЩя╕П Bot Settings - Global bot settings
ЁЯФД Refresh Panel - Refresh this panel"""
        
        bot.edit_message_text(admin_msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif call.data == "admin_search_user":
        msg = bot.edit_message_text("ЁЯФН User ID рднреЗрдЬреЗрдВ (number):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "search_user", "message_id": msg.message_id}
    
    elif call.data == "admin_global_settings":
        bot_data = get_bot_data()
        settings = bot_data.get("settings", {})
        
        msg = f"""тЪЩя╕П **Global Default Settings**

ЁЯТ╕ Min Withdrawal: тВ╣{settings.get('min_withdrawal', MINIMUM_WITHDRAWAL)}
ЁЯФЧ Referral Reward: тВ╣{settings.get('referral_reward', REFERRAL_REWARD)}
ЁЯОп Milestone Count: {settings.get('referral_milestone_count', REFERRAL_MILESTONE_COUNT)}
ЁЯОБ Milestone Reward: тВ╣{settings.get('referral_milestone_reward', REFERRAL_MILESTONE_REWARD)}
ЁЯОЙ Welcome Bonus: тВ╣{settings.get('default_welcome_bonus', DEFAULT_WELCOME_BONUS)}

тД╣я╕П These are default values for ALL users."""
        
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("ЁЯТ╕ Edit Min Withdrawal", callback_data="admin_edit_global_min_withdrawal")
        btn2 = types.InlineKeyboardButton("ЁЯФЧ Edit Referral Reward", callback_data="admin_edit_global_ref_reward")
        btn3 = types.InlineKeyboardButton("ЁЯОп Edit Milestone Count", callback_data="admin_edit_global_milestone_count")
        btn4 = types.InlineKeyboardButton("ЁЯОБ Edit Milestone Reward", callback_data="admin_edit_global_milestone_reward")
        btn5 = types.InlineKeyboardButton("ЁЯОЙ Edit Welcome Bonus", callback_data="admin_edit_global_welcome_bonus")
        back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_back")
        keyboard.add(btn1, btn2, btn3, btn4, btn5, back_btn)
        
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif call.data == "admin_back":
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton("ЁЯТ╕ Withdrawal Requests", callback_data="admin_withdrawals")
        btn2 = types.InlineKeyboardButton("ЁЯОп Manage Tasks", callback_data="admin_tasks")
        btn3 = types.InlineKeyboardButton("ЁЯУК User Statistics", callback_data="admin_stats")
        btn4 = types.InlineKeyboardButton("ЁЯТ░ Adjust Balance", callback_data="admin_adjust_balance")
        btn5 = types.InlineKeyboardButton("ЁЯЪл Block/Unblock User", callback_data="admin_block_user")
        btn6 = types.InlineKeyboardButton("ЁЯУи Message Center", callback_data="admin_message_center")
        btn7 = types.InlineKeyboardButton("ЁЯФЧ Referral Settings", callback_data="admin_referral_settings")
        btn8 = types.InlineKeyboardButton("тЪЩя╕П Bot Settings", callback_data="admin_global_settings")
        refresh_btn = types.InlineKeyboardButton("ЁЯФД Refresh Panel", callback_data="admin_refresh")
        
        keyboard.add(btn1, btn2)
        keyboard.add(btn3, btn4)
        keyboard.add(btn5, btn6)
        keyboard.add(btn7, btn8)
        keyboard.add(refresh_btn)
        
        admin_msg = """ЁЯФз **Admin Panel**

Select an option:

ЁЯТ╕ Withdrawal Requests - Manage user withdrawals
ЁЯОп Manage Tasks - Add/Edit tasks
ЁЯУК User Statistics - View all user stats
ЁЯТ░ Adjust Balance - Add/deduct user balance
ЁЯЪл Block/Unblock - Block or unblock users
ЁЯУи Message Center - Broadcast messages
ЁЯФЧ Referral Settings - Per-user referral settings
тЪЩя╕П Bot Settings - Global bot settings
ЁЯФД Refresh Panel - Refresh this panel"""
        
        bot.edit_message_text(admin_msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif call.data.startswith("admin_page_"):
        page = int(call.data.split("_")[-1])
        show_users_page(call.message.chat.id, call.message.message_id, page, 10)
    
    elif call.data.startswith("admin_view_user_"):
        user_id = int(call.data.replace("admin_view_user_", ""))
        show_user_details(call.message.chat.id, call.message.message_id, user_id)
    
    elif call.data.startswith("admin_edit_user_"):
        user_id = int(call.data.replace("admin_edit_user_", ""))
        show_user_edit_options(call.message.chat.id, call.message.message_id, user_id)
    
    elif call.data.startswith("admin_set_ref_reward_"):
        user_id = int(call.data.replace("admin_set_ref_reward_", ""))
        msg = bot.edit_message_text(f"ЁЯТ░ User {user_id} рдХреЗ рд▓рд┐рдП Referral Reward enter рдХрд░реЗрдВ:\n\n(рд░реБрдкрдпреЗ рдореЗрдВ, рдпрд╛ 'default' type рдХрд░реЗрдВ)", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "set_ref_reward", "user_id": user_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_set_milestone_count_"):
        user_id = int(call.data.replace("admin_set_milestone_count_", ""))
        msg = bot.edit_message_text(f"ЁЯОп User {user_id} рдХреЗ рд▓рд┐рдП Milestone Count enter рдХрд░реЗрдВ:\n\n(number, рдпрд╛ 'default' type рдХрд░реЗрдВ)", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "set_milestone_count", "user_id": user_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_set_milestone_reward_"):
        user_id = int(call.data.replace("admin_set_milestone_reward_", ""))
        msg = bot.edit_message_text(f"ЁЯОБ User {user_id} рдХреЗ рд▓рд┐рдП Milestone Reward enter рдХрд░реЗрдВ:\n\n(рд░реБрдкрдпреЗ рдореЗрдВ, рдпрд╛ 'default' type рдХрд░реЗрдВ)", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "set_milestone_reward", "user_id": user_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_set_welcome_bonus_"):
        user_id = int(call.data.replace("admin_set_welcome_bonus_", ""))
        msg = bot.edit_message_text(f"ЁЯОЙ User {user_id} рдХреЗ рд▓рд┐рдП Welcome Bonus enter рдХрд░реЗрдВ:\n\n(рд░реБрдкрдпреЗ рдореЗрдВ, рдпрд╛ 'default' type рдХрд░реЗрдВ)", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "set_welcome_bonus", "user_id": user_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_add_balance_"):
        user_id = int(call.data.replace("admin_add_balance_", ""))
        msg = bot.edit_message_text(f"ЁЯТ░ User {user_id} рдХреЗ balance рдореЗрдВ add рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП amount enter рдХрд░реЗрдВ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "add_balance", "user_id": user_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_deduct_balance_"):
        user_id = int(call.data.replace("admin_deduct_balance_", ""))
        msg = bot.edit_message_text(f"ЁЯТ╕ User {user_id} рдХреЗ balance рд╕реЗ deduct рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП amount enter рдХрд░реЗрдВ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "deduct_balance", "user_id": user_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_block_"):
        user_id = int(call.data.replace("admin_block_", ""))
        block_user(user_id)
        bot.answer_callback_query(call.id, f"тЬЕ User {user_id} blocked successfully!")
        bot.edit_message_text(f"ЁЯЪл User {user_id} has been blocked", call.message.chat.id, call.message.message_id)
        log_activity(ADMIN_ID, "user_blocked_by_admin", {"user_id": user_id})
        try:
            bot.send_message(user_id, "ЁЯЪл рдЖрдкрдХрд╛ account admin рджреНрд╡рд╛рд░рд╛ block рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
        except:
            pass
    
    elif call.data.startswith("admin_unblock_"):
        user_id = int(call.data.replace("admin_unblock_", ""))
        unblock_user(user_id)
        bot.answer_callback_query(call.id, f"тЬЕ User {user_id} unblocked successfully!")
        bot.edit_message_text(f"тЬЕ User {user_id} has been unblocked", call.message.chat.id, call.message.message_id)
        log_activity(ADMIN_ID, "user_unblocked_by_admin", {"user_id": user_id})
        try:
            bot.send_message(user_id, "тЬЕ рдЖрдкрдХрд╛ account unblock рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдЕрдм рдЖрдк bot use рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
        except:
            pass
    
    elif call.data == "admin_edit_global_min_withdrawal":
        msg = bot.edit_message_text("ЁЯТ╕ рд╕рднреА users рдХреЗ рд▓рд┐рдП Minimum Withdrawal amount enter рдХрд░реЗрдВ (рд░реБрдкрдпреЗ рдореЗрдВ):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "edit_global_min_withdrawal", "message_id": msg.message_id}
    
    elif call.data == "admin_edit_global_ref_reward":
        msg = bot.edit_message_text("ЁЯФЧ рд╕рднреА users рдХреЗ рд▓рд┐рдП Referral Reward enter рдХрд░реЗрдВ (рд░реБрдкрдпреЗ рдореЗрдВ):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "edit_global_ref_reward", "message_id": msg.message_id}
    
    elif call.data == "admin_edit_global_milestone_count":
        msg = bot.edit_message_text("ЁЯОп рд╕рднреА users рдХреЗ рд▓рд┐рдП Milestone Count enter рдХрд░реЗрдВ (рд╕рдВрдЦреНрдпрд╛ рдореЗрдВ):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "edit_global_milestone_count", "message_id": msg.message_id}
    
    elif call.data == "admin_edit_global_milestone_reward":
        msg = bot.edit_message_text("ЁЯОБ рд╕рднреА users рдХреЗ рд▓рд┐рдП Milestone Reward enter рдХрд░реЗрдВ (рд░реБрдкрдпреЗ рдореЗрдВ):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "edit_global_milestone_reward", "message_id": msg.message_id}
    
    elif call.data == "admin_edit_global_welcome_bonus":
        msg = bot.edit_message_text("ЁЯОЙ рд╕рднреА users рдХреЗ рд▓рд┐рдП Welcome Bonus enter рдХрд░реЗрдВ (рд░реБрдкрдпреЗ рдореЗрдВ):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "edit_global_welcome_bonus", "message_id": msg.message_id}
    
    elif call.data == "admin_msg_single":
        msg = bot.edit_message_text("ЁЯСд **Send Message to Single User**\n\nUser ID enter рдХрд░реЗрдВ рдЬрд┐рд╕реЗ message рднреЗрдЬрдирд╛ рд╣реИ:", call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        admin_state[ADMIN_ID] = {"action": "msg_single_get_user", "message_id": msg.message_id}
    
    elif call.data == "admin_msg_broadcast":
        msg = bot.edit_message_text("ЁЯУв **Broadcast Message to All Users**\n\nрд╡рд╣ message type рдХрд░реЗрдВ рдЬреЛ рд╕рднреА users рдХреЛ рднреЗрдЬрдирд╛ рд╣реИ:", call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        admin_state[ADMIN_ID] = {"action": "msg_broadcast_get_message", "message_id": msg.message_id}
    
    elif call.data == "admin_task_add":
        msg = bot.edit_message_text("тЮХ **Add New Task**\n\nЁЯУЭ Task рдХрд╛ Title enter рдХрд░реЗрдВ:", call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        admin_state[ADMIN_ID] = {"action": "task_add_title", "message_id": msg.message_id, "task_data": {}}
    
    elif call.data.startswith("admin_task_view_"):
        page = int(call.data.split("_")[-1])
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        per_page = 5
        total_pages = (len(tasks) - 1) // per_page + 1 if tasks else 0
        start = page * per_page
        end = start + per_page
        
        msg = f"ЁЯУЛ **All Tasks** (Page {page + 1}/{total_pages})\n\n"
        
        for i, task in enumerate(tasks[start:end], start + 1):
            status = "тЬЕ Active" if task.get("active", True) else "тЭМ Inactive"
            completed = task.get("completed_count", 0)
            quantity = task.get("quantity", 999999)
            msg += f"**{i}. {task['title']}**\n"
            msg += f"   Status: {status}\n"
            msg += f"   Reward: тВ╣{task['reward']}\n"
            msg += f"   Completed: {completed}/{quantity}\n"
            msg += f"   Link: {task['link'][:30]}...\n\n"
        
        keyboard = types.InlineKeyboardMarkup(row_width=3)
        
        for task in tasks[start:end]:
            edit_btn = types.InlineKeyboardButton(f"тЬПя╕П Edit", callback_data=f"admin_task_edit_{task['id']}")
            toggle_btn = types.InlineKeyboardButton(
                "ЁЯФД Toggle" if task.get("active", True) else "ЁЯФД Toggle",
                callback_data=f"admin_task_toggle_{task['id']}"
            )
            delete_btn = types.InlineKeyboardButton(f"ЁЯЧС Delete", callback_data=f"admin_task_delete_{task['id']}")
            keyboard.row(edit_btn, toggle_btn, delete_btn)
        
        nav_buttons = []
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("тмЕя╕П Previous", callback_data=f"admin_task_view_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton("тЮбя╕П Next", callback_data=f"admin_task_view_{page + 1}"))
        
        if nav_buttons:
            keyboard.row(*nav_buttons)
        
        back_btn = types.InlineKeyboardButton("ЁЯФЩ Back to Tasks", callback_data="admin_tasks")
        keyboard.add(back_btn)
        
        bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif call.data.startswith("admin_task_toggle_"):
        task_id = call.data.split("_")[-1]
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        for task in tasks:
            if task["id"] == task_id:
                task["active"] = not task.get("active", True)
                save_bot_data(bot_data)
                status = "Active" if task["active"] else "Inactive"
                bot.answer_callback_query(call.id, f"тЬЕ Task is now {status}!")
                
                if task["active"]:
                    msg_text = f"ЁЯФФ **New Task Available!**\n\nЁЯУЛ {task['title']}\nЁЯТ░ Reward: тВ╣{task['reward']}\n\nGet task now: /newtask"
                    success, failed = broadcast_notification(msg_text)
                    bot.send_message(ADMIN_ID, f"ЁЯУв Task activated! Notification sent to {success} users")
                
                log_activity(ADMIN_ID, "admin_task_toggled", {"task_id": task_id, "active": task["active"]})
                
                # Refresh the view
                bot_data = get_bot_data()
                tasks = bot_data.get("tasks", [])
                msg = f"ЁЯОп **Task Management**\n\nЁЯУЛ Total Tasks: {len(tasks)}\n\n"
                
                if tasks:
                    active_tasks = [t for t in tasks if t.get("active", True)]
                    inactive_tasks = [t for t in tasks if not t.get("active", True)]
                    msg += f"тЬЕ Active: {len(active_tasks)}\nтЭМ Inactive: {len(inactive_tasks)}\n\n"
                    
                    for i, t in enumerate(tasks[:5], 1):
                        st = "тЬЕ" if t.get("active", True) else "тЭМ"
                        completed = t.get("completed_count", 0)
                        quantity = t.get("quantity", 999999)
                        msg += f"{i}. {st} {t['title']}\n   Reward: тВ╣{t['reward']} | Done: {completed}/{quantity}\n\n"
                
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                add_btn = types.InlineKeyboardButton("тЮХ Add New Task", callback_data="admin_task_add")
                view_btn = types.InlineKeyboardButton("ЁЯУЛ View All Tasks", callback_data="admin_task_view_0")
                keyboard.add(add_btn, view_btn)
                back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
                keyboard.add(back_btn)
                
                bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
                break
    
    elif call.data.startswith("admin_task_delete_"):
        task_id = call.data.split("_")[-1]
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        for i, task in enumerate(tasks):
            if task["id"] == task_id:
                task_title = task["title"]
                del tasks[i]
                save_bot_data(bot_data)
                bot.answer_callback_query(call.id, f"тЬЕ Task '{task_title}' deleted!")
                log_activity(ADMIN_ID, "admin_task_deleted", {"task_id": task_id, "title": task_title})
                
                # Refresh the view
                bot_data = get_bot_data()
                tasks = bot_data.get("tasks", [])
                msg = f"ЁЯОп **Task Management**\n\nЁЯУЛ Total Tasks: {len(tasks)}\n\n"
                
                if tasks:
                    active_tasks = [t for t in tasks if t.get("active", True)]
                    inactive_tasks = [t for t in tasks if not t.get("active", True)]
                    msg += f"тЬЕ Active: {len(active_tasks)}\nтЭМ Inactive: {len(inactive_tasks)}\n\n"
                    
                    for i, t in enumerate(tasks[:5], 1):
                        st = "тЬЕ" if t.get("active", True) else "тЭМ"
                        completed = t.get("completed_count", 0)
                        quantity = t.get("quantity", 999999)
                        msg += f"{i}. {st} {t['title']}\n   Reward: тВ╣{t['reward']} | Done: {completed}/{quantity}\n\n"
                else:
                    msg += "тЪая╕П No tasks available\n\n"
                
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                add_btn = types.InlineKeyboardButton("тЮХ Add New Task", callback_data="admin_task_add")
                if tasks:
                    view_btn = types.InlineKeyboardButton("ЁЯУЛ View All Tasks", callback_data="admin_task_view_0")
                    keyboard.add(add_btn, view_btn)
                else:
                    keyboard.add(add_btn)
                back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
                keyboard.add(back_btn)
                
                bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
                break
    
    elif call.data.startswith("admin_task_edit_"):
        task_id = call.data.split("_")[-1]
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        for task in tasks:
            if task["id"] == task_id:
                msg = f"""тЬПя╕П **Edit Task**

ЁЯУЭ Title: {task['title']}
ЁЯУД Description: {task['description']}
ЁЯФЧ Link: {task['link']}
ЁЯТ░ Reward: тВ╣{task['reward']}
ЁЯУК Quantity: {task.get('quantity', 999999)}
тЬЕ Status: {'Active' if task.get('active', True) else 'Inactive'}

Select what to edit:"""
                
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                title_btn = types.InlineKeyboardButton("ЁЯУЭ Title", callback_data=f"admin_task_edit_title_{task_id}")
                desc_btn = types.InlineKeyboardButton("ЁЯУД Description", callback_data=f"admin_task_edit_desc_{task_id}")
                link_btn = types.InlineKeyboardButton("ЁЯФЧ Link", callback_data=f"admin_task_edit_link_{task_id}")
                reward_btn = types.InlineKeyboardButton("ЁЯТ░ Reward", callback_data=f"admin_task_edit_reward_{task_id}")
                qty_btn = types.InlineKeyboardButton("ЁЯУК Quantity", callback_data=f"admin_task_edit_qty_{task_id}")
                
                keyboard.add(title_btn, desc_btn)
                keyboard.add(link_btn, reward_btn)
                keyboard.add(qty_btn)
                
                back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_task_view_0")
                keyboard.add(back_btn)
                
                bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
                break
    
    elif call.data.startswith("admin_task_edit_title_"):
        task_id = call.data.split("_")[-1]
        msg = bot.edit_message_text("ЁЯУЭ рдирдпрд╛ Task Title enter рдХрд░реЗрдВ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "task_edit_title", "task_id": task_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_task_edit_desc_"):
        task_id = call.data.split("_")[-1]
        msg = bot.edit_message_text("ЁЯУД рдирдпрд╛ Task Description enter рдХрд░реЗрдВ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "task_edit_desc", "task_id": task_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_task_edit_link_"):
        task_id = call.data.split("_")[-1]
        msg = bot.edit_message_text("ЁЯФЧ рдирдпрд╛ Task Link enter рдХрд░реЗрдВ:", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "task_edit_link", "task_id": task_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_task_edit_reward_"):
        task_id = call.data.split("_")[-1]
        msg = bot.edit_message_text("ЁЯТ░ рдирдпрд╛ Task Reward enter рдХрд░реЗрдВ (рд░реБрдкрдпреЗ рдореЗрдВ):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "task_edit_reward", "task_id": task_id, "message_id": msg.message_id}
    
    elif call.data.startswith("admin_task_edit_qty_"):
        task_id = call.data.split("_")[-1]
        msg = bot.edit_message_text("ЁЯУК рдирдпрд╛ Task Quantity enter рдХрд░реЗрдВ (рдХрд┐рддрдиреЗ users рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ):", call.message.chat.id, call.message.message_id)
        admin_state[ADMIN_ID] = {"action": "task_edit_qty", "task_id": task_id, "message_id": msg.message_id}

def show_users_page(chat_id, message_id, page, per_page):
    users_data = get_all_users_data()
    users_list = list(users_data.items())
    total_users = len(users_list)
    total_pages = (total_users + per_page - 1) // per_page
    
    start_idx = page * per_page
    end_idx = min(start_idx + per_page, total_users)
    
    msg = f"ЁЯСе **All Users** (Page {page + 1}/{total_pages})\n\n"
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    
    for user_id, user_data in users_list[start_idx:end_idx]:
        user_name = user_data.get("first_name", "Unknown")
        balance = user_data.get("balance", 0)
        tasks = len(user_data.get("completed_tasks", []))
        
        btn_text = f"{user_name} (ID: {user_id}) - тВ╣{balance} | {tasks} tasks"
        btn = types.InlineKeyboardButton(btn_text, callback_data=f"admin_view_user_{user_id}")
        keyboard.add(btn)
    
    nav_buttons = []
    if page > 0:
        nav_buttons.append(types.InlineKeyboardButton("тЧАя╕П Previous", callback_data=f"admin_page_{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(types.InlineKeyboardButton("Next тЦ╢я╕П", callback_data=f"admin_page_{page + 1}"))
    
    if nav_buttons:
        keyboard.row(*nav_buttons)
    
    back_btn = types.InlineKeyboardButton("ЁЯФЩ Back to Menu", callback_data="admin_back")
    keyboard.add(back_btn)
    
    bot.edit_message_text(msg, chat_id, message_id, reply_markup=keyboard, parse_mode='Markdown')

def show_user_details(chat_id, message_id, user_id):
    user_data = get_user_data(user_id)
    
    if not user_data:
        bot.edit_message_text("тЭМ User not found", chat_id, message_id)
        return
    
    bot_data = get_bot_data()
    settings = bot_data.get("settings", {})
    
    custom_ref_reward = get_user_custom_setting(user_id, "referral_reward", None)
    ref_reward_display = f"тВ╣{custom_ref_reward} (Custom)" if custom_ref_reward is not None else f"тВ╣{settings.get('referral_reward', REFERRAL_REWARD)} (Default)"
    
    custom_milestone_count = get_user_custom_setting(user_id, "milestone_count", None)
    milestone_count_display = f"{custom_milestone_count} (Custom)" if custom_milestone_count is not None else f"{settings.get('referral_milestone_count', REFERRAL_MILESTONE_COUNT)} (Default)"
    
    custom_milestone_reward = get_user_custom_setting(user_id, "milestone_reward", None)
    milestone_reward_display = f"тВ╣{custom_milestone_reward} (Custom)" if custom_milestone_reward is not None else f"тВ╣{settings.get('referral_milestone_reward', REFERRAL_MILESTONE_REWARD)} (Default)"
    
    custom_welcome_bonus = get_user_custom_setting(user_id, "welcome_bonus", None)
    welcome_bonus_display = f"тВ╣{custom_welcome_bonus} (Custom)" if custom_welcome_bonus is not None else f"тВ╣{settings.get('default_welcome_bonus', DEFAULT_WELCOME_BONUS)} (Default)"
    
    join_date = datetime.fromtimestamp(user_data.get("joined_at", 0)).strftime('%Y-%m-%d %H:%M')
    
    msg = f"""ЁЯСд **User Details**

**Basic Info:**
тАв ID: `{user_id}`
тАв Name: {user_data.get('first_name', 'N/A')}
тАв Username: @{user_data.get('username', 'N/A')}
тАв Language: {user_data.get('language', 'hindi')}
тАв Joined: {join_date}

**Balance & Earnings:**
тАв Current Balance: тВ╣{user_data.get('balance', 0)}
тАв Total Earnings: тВ╣{user_data.get('total_earnings', 0)}

**Activity:**
тАв Completed Tasks: {len(user_data.get('completed_tasks', []))}
тАв Referrals: {user_data.get('referrals', 0)}
тАв Referred By: {user_data.get('referred_by', 'None')}

**Custom Settings:**
тАв Referral Reward: {ref_reward_display}
тАв Milestone Count: {milestone_count_display}
тАв Milestone Reward: {milestone_reward_display}
тАв Welcome Bonus: {welcome_bonus_display}"""
    
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    edit_btn = types.InlineKeyboardButton("тЬПя╕П Edit Settings", callback_data=f"admin_edit_user_{user_id}")
    back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_users_list")
    keyboard.add(edit_btn)
    keyboard.add(back_btn)
    
    bot.edit_message_text(msg, chat_id, message_id, reply_markup=keyboard, parse_mode='Markdown')

def show_user_edit_options(chat_id, message_id, user_id):
    msg = f"тЬПя╕П **Edit User Settings**\n\nUser ID: `{user_id}`\n\nрдХреНрдпрд╛ edit рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
    
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton("ЁЯТ░ Set Referral Reward", callback_data=f"admin_set_ref_reward_{user_id}")
    btn2 = types.InlineKeyboardButton("ЁЯОп Set Milestone Count", callback_data=f"admin_set_milestone_count_{user_id}")
    btn3 = types.InlineKeyboardButton("ЁЯОБ Set Milestone Reward", callback_data=f"admin_set_milestone_reward_{user_id}")
    btn4 = types.InlineKeyboardButton("ЁЯОЙ Set Welcome Bonus", callback_data=f"admin_set_welcome_bonus_{user_id}")
    btn5 = types.InlineKeyboardButton("тЮХ Add Balance", callback_data=f"admin_add_balance_{user_id}")
    btn6 = types.InlineKeyboardButton("тЮЦ Deduct Balance", callback_data=f"admin_deduct_balance_{user_id}")
    back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data=f"admin_view_user_{user_id}")
    
    keyboard.add(btn1, btn2, btn3, btn4, btn5, btn6, back_btn)
    
    bot.edit_message_text(msg, chat_id, message_id, reply_markup=keyboard, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.from_user.id == ADMIN_ID and ADMIN_ID in admin_state)
def handle_admin_input(message):
    state = admin_state.get(ADMIN_ID)
    if not state:
        return
    
    action = state.get("action")
    
    if action == "search_user":
        try:
            user_id = int(message.text.strip())
            if user_exists(user_id):
                bot.delete_message(message.chat.id, message.message_id)
                show_user_details(message.chat.id, state["message_id"], user_id)
            else:
                bot.send_message(ADMIN_ID, f"тЭМ User ID {user_id} not found")
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid User ID")
        del admin_state[ADMIN_ID]
    
    elif action == "set_ref_reward":
        user_id = state["user_id"]
        try:
            if message.text.strip().lower() == "default":
                set_user_custom_setting(user_id, "referral_reward", None)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Referral Reward default рдкрд░ set рд╣реЛ рдЧрдпрд╛")
            else:
                amount = float(message.text.strip())
                set_user_custom_setting(user_id, "referral_reward", amount)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Referral Reward тВ╣{amount} set рд╣реЛ рдЧрдпрд╛")
            log_activity(ADMIN_ID, "admin_set_referral_reward", {"user_id": user_id, "amount": amount if message.text.strip().lower() != "default" else "default"})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount")
        del admin_state[ADMIN_ID]
    
    elif action == "set_milestone_count":
        user_id = state["user_id"]
        try:
            if message.text.strip().lower() == "default":
                set_user_custom_setting(user_id, "milestone_count", None)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Milestone Count default рдкрд░ set рд╣реЛ рдЧрдпрд╛")
            else:
                count = int(message.text.strip())
                set_user_custom_setting(user_id, "milestone_count", count)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Milestone Count {count} set рд╣реЛ рдЧрдпрд╛")
            log_activity(ADMIN_ID, "admin_set_milestone_count", {"user_id": user_id, "count": count if message.text.strip().lower() != "default" else "default"})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid number")
        del admin_state[ADMIN_ID]
    
    elif action == "set_milestone_reward":
        user_id = state["user_id"]
        try:
            if message.text.strip().lower() == "default":
                set_user_custom_setting(user_id, "milestone_reward", None)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Milestone Reward default рдкрд░ set рд╣реЛ рдЧрдпрд╛")
            else:
                amount = float(message.text.strip())
                set_user_custom_setting(user_id, "milestone_reward", amount)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Milestone Reward тВ╣{amount} set рд╣реЛ рдЧрдпрд╛")
            log_activity(ADMIN_ID, "admin_set_milestone_reward", {"user_id": user_id, "amount": amount if message.text.strip().lower() != "default" else "default"})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount")
        del admin_state[ADMIN_ID]
    
    elif action == "set_welcome_bonus":
        user_id = state["user_id"]
        try:
            if message.text.strip().lower() == "default":
                set_user_custom_setting(user_id, "welcome_bonus", None)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Welcome Bonus default рдкрд░ set рд╣реЛ рдЧрдпрд╛")
            else:
                amount = float(message.text.strip())
                set_user_custom_setting(user_id, "welcome_bonus", amount)
                bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХрд╛ Welcome Bonus тВ╣{amount} set рд╣реЛ рдЧрдпрд╛")
            log_activity(ADMIN_ID, "admin_set_welcome_bonus", {"user_id": user_id, "amount": amount if message.text.strip().lower() != "default" else "default"})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount")
        del admin_state[ADMIN_ID]
    
    elif action == "add_balance":
        user_id = state["user_id"]
        try:
            amount = float(message.text.strip())
            add_user_balance(user_id, amount)
            bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХреЗ balance рдореЗрдВ тВ╣{amount} add рд╣реЛ рдЧрдпрд╛")
            log_activity(ADMIN_ID, "admin_add_balance", {"user_id": user_id, "amount": amount})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount")
        del admin_state[ADMIN_ID]
    
    elif action == "deduct_balance":
        user_id = state["user_id"]
        try:
            amount = float(message.text.strip())
            deduct_user_balance(user_id, amount)
            bot.send_message(ADMIN_ID, f"тЬЕ User {user_id} рдХреЗ balance рд╕реЗ тВ╣{amount} deduct рд╣реЛ рдЧрдпрд╛")
            log_activity(ADMIN_ID, "admin_deduct_balance", {"user_id": user_id, "amount": amount})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount")
        del admin_state[ADMIN_ID]
    
    elif action == "search_user_for_referral":
        try:
            user_id = int(message.text.strip())
            if user_exists(user_id):
                bot.delete_message(message.chat.id, message.message_id)
                show_user_edit_options(message.chat.id, state["message_id"], user_id)
            else:
                bot.send_message(ADMIN_ID, f"тЭМ User ID {user_id} not found")
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid User ID")
        del admin_state[ADMIN_ID]
    
    elif action == "search_user_for_balance":
        try:
            user_id = int(message.text.strip())
            if user_exists(user_id):
                bot.delete_message(message.chat.id, message.message_id)
                user_data = get_user_data(user_id)
                
                keyboard = types.InlineKeyboardMarkup(row_width=2)
                add_btn = types.InlineKeyboardButton("тЮХ Add Balance", callback_data=f"admin_add_balance_{user_id}")
                deduct_btn = types.InlineKeyboardButton("тЮЦ Deduct Balance", callback_data=f"admin_deduct_balance_{user_id}")
                back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
                keyboard.add(add_btn, deduct_btn)
                keyboard.add(back_btn)
                
                msg = f"""ЁЯТ░ **Adjust Balance**

User ID: `{user_id}`
Name: {user_data.get('first_name', 'N/A')}
Current Balance: тВ╣{user_data.get('balance', 0)}

Choose action:"""
                
                bot.edit_message_text(msg, message.chat.id, state["message_id"], reply_markup=keyboard, parse_mode='Markdown')
            else:
                bot.send_message(ADMIN_ID, f"тЭМ User ID {user_id} not found")
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid User ID")
        del admin_state[ADMIN_ID]
    
    elif action == "search_user_for_block":
        try:
            user_id = int(message.text.strip())
            if user_exists(user_id):
                bot.delete_message(message.chat.id, message.message_id)
                user_data = get_user_data(user_id)
                is_blocked = is_user_blocked(user_id)
                
                keyboard = types.InlineKeyboardMarkup()
                if is_blocked:
                    action_btn = types.InlineKeyboardButton("тЬЕ Unblock User", callback_data=f"admin_unblock_{user_id}")
                else:
                    action_btn = types.InlineKeyboardButton("ЁЯЪл Block User", callback_data=f"admin_block_{user_id}")
                back_btn = types.InlineKeyboardButton("ЁЯФЩ Back", callback_data="admin_refresh")
                keyboard.add(action_btn)
                keyboard.add(back_btn)
                
                status = "ЁЯЪл Blocked" if is_blocked else "тЬЕ Active"
                msg = f"""ЁЯЪл **Block/Unblock User**

User ID: `{user_id}`
Name: {user_data.get('first_name', 'N/A')}
Status: {status}

Choose action:"""
                
                bot.edit_message_text(msg, message.chat.id, state["message_id"], reply_markup=keyboard, parse_mode='Markdown')
            else:
                bot.send_message(ADMIN_ID, f"тЭМ User ID {user_id} not found")
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid User ID")
        del admin_state[ADMIN_ID]
    
    elif action == "edit_global_min_withdrawal":
        try:
            amount = float(message.text.strip())
            bot_data = get_bot_data()
            if "settings" not in bot_data:
                bot_data["settings"] = {}
            bot_data["settings"]["min_withdrawal"] = amount
            save_bot_data(bot_data)
            bot.send_message(ADMIN_ID, f"тЬЕ рд╕рднреА users рдХреЗ рд▓рд┐рдП Minimum Withdrawal тВ╣{amount} set рд╣реЛ рдЧрдпрд╛!\n\nрдЕрдм рд╕рднреА рдирдП withdrawals рдХреЗ рд▓рд┐рдП рдпрд╣ limit apply рд╣реЛрдЧреАред")
            log_activity(ADMIN_ID, "admin_edit_global_min_withdrawal", {"amount": amount})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount. рдХреГрдкрдпрд╛ рд╕рд╣реА рд░рд╛рд╢рд┐ enter рдХрд░реЗрдВред")
        del admin_state[ADMIN_ID]
    
    elif action == "edit_global_ref_reward":
        try:
            amount = float(message.text.strip())
            bot_data = get_bot_data()
            if "settings" not in bot_data:
                bot_data["settings"] = {}
            bot_data["settings"]["referral_reward"] = amount
            save_bot_data(bot_data)
            bot.send_message(ADMIN_ID, f"тЬЕ рд╕рднреА users рдХреЗ рд▓рд┐рдП Referral Reward тВ╣{amount} set рд╣реЛ рдЧрдпрд╛!\n\nрдЕрдм рд╣рд░ рдирдП referral рдкрд░ рдпрд╣ amount рдорд┐рд▓реЗрдЧрд╛ (рдЬрд┐рди users рдХреЗ custom settings рдирд╣реАрдВ рд╣реИрдВ)ред")
            
            msg_text = f"ЁЯФФ **Referral Reward Updated!**\n\nЁЯТ░ New reward: тВ╣{amount} per referral\n\nЁЯФЧ Share your link: /refer"
            success, failed = broadcast_notification(msg_text)
            bot.send_message(ADMIN_ID, f"ЁЯУв Notification sent to users!\nтЬЕ Success: {success}\nтЭМ Failed: {failed}")
            
            log_activity(ADMIN_ID, "admin_edit_global_ref_reward", {"amount": amount, "notified": success})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount. рдХреГрдкрдпрд╛ рд╕рд╣реА рд░рд╛рд╢рд┐ enter рдХрд░реЗрдВред")
        del admin_state[ADMIN_ID]
    
    elif action == "edit_global_milestone_count":
        try:
            count = int(message.text.strip())
            bot_data = get_bot_data()
            if "settings" not in bot_data:
                bot_data["settings"] = {}
            bot_data["settings"]["referral_milestone_count"] = count
            save_bot_data(bot_data)
            bot.send_message(ADMIN_ID, f"тЬЕ рд╕рднреА users рдХреЗ рд▓рд┐рдП Milestone Count {count} set рд╣реЛ рдЧрдпрд╛!\n\nрдЕрдм рд╣рд░ {count} referrals рдкрд░ milestone bonus рдорд┐рд▓реЗрдЧрд╛ред")
            
            msg_text = f"ЁЯФФ **Milestone Updated!**\n\nЁЯОп New milestone: Every {count} referrals\n\nЁЯФЧ Check progress: /refer"
            success, failed = broadcast_notification(msg_text)
            bot.send_message(ADMIN_ID, f"ЁЯУв Notification sent!\nтЬЕ Success: {success}\nтЭМ Failed: {failed}")
            
            log_activity(ADMIN_ID, "admin_edit_global_milestone_count", {"count": count, "notified": success})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid number. рдХреГрдкрдпрд╛ рд╕рд╣реА рд╕рдВрдЦреНрдпрд╛ enter рдХрд░реЗрдВред")
        del admin_state[ADMIN_ID]
    
    elif action == "edit_global_milestone_reward":
        try:
            amount = float(message.text.strip())
            bot_data = get_bot_data()
            if "settings" not in bot_data:
                bot_data["settings"] = {}
            bot_data["settings"]["referral_milestone_reward"] = amount
            save_bot_data(bot_data)
            bot.send_message(ADMIN_ID, f"тЬЕ рд╕рднреА users рдХреЗ рд▓рд┐рдП Milestone Reward тВ╣{amount} set рд╣реЛ рдЧрдпрд╛!\n\рдирдЕрдм milestone complete рд╣реЛрдиреЗ рдкрд░ рдпрд╣ bonus рдорд┐рд▓реЗрдЧрд╛ред")
            
            msg_text = f"ЁЯФФ **Milestone Reward Updated!**\n\nЁЯПЖ New bonus: тВ╣{amount}\n\nЁЯФЧ Start referring: /refer"
            success, failed = broadcast_notification(msg_text)
            bot.send_message(ADMIN_ID, f"ЁЯУв Notification sent!\nтЬЕ Success: {success}\nтЭМ Failed: {failed}")
            
            log_activity(ADMIN_ID, "admin_edit_global_milestone_reward", {"amount": amount, "notified": success})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount. рдХреГрдкрдпрд╛ рд╕рд╣реА рд░рд╛рд╢рд┐ enter рдХрд░реЗрдВред")
        del admin_state[ADMIN_ID]
    
    elif action == "edit_global_welcome_bonus":
        try:
            amount = float(message.text.strip())
            bot_data = get_bot_data()
            if "settings" not in bot_data:
                bot_data["settings"] = {}
            bot_data["settings"]["default_welcome_bonus"] = amount
            save_bot_data(bot_data)
            bot.send_message(ADMIN_ID, f"тЬЕ рд╕рднреА users рдХреЗ рд▓рд┐рдП Welcome Bonus тВ╣{amount} set рд╣реЛ рдЧрдпрд╛!\n\nрдЕрдм рд╣рд░ рдирдП user рдХреЛ рдпрд╣ welcome bonus рдорд┐рд▓реЗрдЧрд╛ред")
            
            msg_text = f"ЁЯФФ **Welcome Bonus Updated!**\n\nЁЯОБ New users get тВ╣{amount} bonus!\n\nЁЯФЧ Share your link: /refer"
            success, failed = broadcast_notification(msg_text)
            bot.send_message(ADMIN_ID, f"ЁЯУв Notification sent!\nтЬЕ Success: {success}\nтЭМ Failed: {failed}")
            
            log_activity(ADMIN_ID, "admin_edit_global_welcome_bonus", {"amount": amount, "notified": success})
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid amount. рдХреГрдкрдпрд╛ рд╕рд╣реА рд░рд╛рд╢рд┐ enter рдХрд░реЗрдВред")
        del admin_state[ADMIN_ID]
    
    elif action == "msg_single_get_user":
        try:
            user_id = int(message.text.strip())
            if user_exists(user_id):
                bot.delete_message(message.chat.id, message.message_id)
                user_data = get_user_data(user_id)
                bot.send_message(ADMIN_ID, f"тЬЕ User рдорд┐рд▓ рдЧрдпрд╛!\n\nЁЯСд ID: {user_id}\nЁЯУЭ Name: {user_data.get('first_name', 'N/A')}\n\nрдЕрдм рд╡рд╣ message type рдХрд░реЗрдВ рдЬреЛ рдЗрд╕ user рдХреЛ рднреЗрдЬрдирд╛ рд╣реИ:")
                admin_state[ADMIN_ID] = {"action": "msg_single_send", "user_id": user_id}
            else:
                bot.send_message(ADMIN_ID, f"тЭМ User ID {user_id} not found. рдХреГрдкрдпрд╛ рд╕рд╣реА User ID enter рдХрд░реЗрдВред")
                del admin_state[ADMIN_ID]
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid User ID. рдХреГрдкрдпрд╛ рд╕рд╣реА number enter рдХрд░реЗрдВред")
            del admin_state[ADMIN_ID]
    
    elif action == "msg_single_send":
        user_id = state["user_id"]
        message_text = message.text.strip()
        
        try:
            bot.send_message(user_id, f"ЁЯУй **Message from Admin**\n\n{message_text}", parse_mode='Markdown')
            bot.send_message(ADMIN_ID, f"тЬЕ Message successfully sent!\n\nЁЯСд User ID: {user_id}\nЁЯУЭ Message: {message_text}")
            log_activity(ADMIN_ID, "admin_message_single", {"user_id": user_id, "message": message_text[:100]})
        except Exception as e:
            bot.send_message(ADMIN_ID, f"тЭМ Message send рдХрд░рдиреЗ рдореЗрдВ error рдЖрдИ:\n{str(e)}")
        del admin_state[ADMIN_ID]
    
    elif action == "msg_broadcast_get_message":
        message_text = message.text.strip()
        bot.delete_message(message.chat.id, message.message_id)
        
        users_data = get_all_users_data()
        total_users = len(users_data)
        
        bot.send_message(ADMIN_ID, f"ЁЯУв Broadcast рд╢реБрд░реВ рд╣реЛ рд░рд╣рд╛ рд╣реИ...\n\nЁЯСе Total Users: {total_users}\nЁЯУЭ Message: {message_text}\n\nтП│ рдХреГрдкрдпрд╛ рдереЛрдбрд╝рд╛ wait рдХрд░реЗрдВ...")
        
        success_count = 0
        failed_count = 0
        blocked_count = 0
        
        for user_id_str in users_data.keys():
            try:
                user_id = int(user_id_str)
                if is_user_blocked(user_id):
                    blocked_count += 1
                    continue
                
                bot.send_message(user_id, f"ЁЯУв **Broadcast Message**\n\n{message_text}", parse_mode='Markdown')
                success_count += 1
                time.sleep(0.05)
            except Exception as e:
                failed_count += 1
        
        summary = f"""тЬЕ **Broadcast Complete!**

ЁЯУК Statistics:
тАв Total Users: {total_users}
тАв тЬЕ Sent Successfully: {success_count}
тАв тЭМ Failed: {failed_count}
тАв ЁЯЪл Blocked Users: {blocked_count}

ЁЯУЭ Message: {message_text[:100]}"""
        
        bot.send_message(ADMIN_ID, summary)
        log_activity(ADMIN_ID, "admin_broadcast", {"total_users": total_users, "success": success_count, "failed": failed_count, "blocked": blocked_count, "message": message_text[:100]})
        del admin_state[ADMIN_ID]
    
    elif action == "task_add_title":
        state["task_data"]["title"] = message.text.strip()
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(ADMIN_ID, "ЁЯУД рдЕрдм Task рдХрд╛ Description enter рдХрд░реЗрдВ:")
        admin_state[ADMIN_ID]["action"] = "task_add_desc"
    
    elif action == "task_add_desc":
        state["task_data"]["description"] = message.text.strip()
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(ADMIN_ID, "ЁЯФЧ рдЕрдм Task рдХрд╛ Link enter рдХрд░реЗрдВ:")
        admin_state[ADMIN_ID]["action"] = "task_add_link"
    
    elif action == "task_add_link":
        state["task_data"]["link"] = message.text.strip()
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(ADMIN_ID, "ЁЯТ░ рдЕрдм Task рдХрд╛ Reward enter рдХрд░реЗрдВ (рд░реБрдкрдпреЗ рдореЗрдВ):")
        admin_state[ADMIN_ID]["action"] = "task_add_reward"
    
    elif action == "task_add_reward":
        try:
            reward = float(message.text.strip())
            state["task_data"]["reward"] = reward
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(ADMIN_ID, "ЁЯУК рдЕрдм Task рдХреА Quantity enter рдХрд░реЗрдВ (рдХрд┐рддрдиреЗ users рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ):")
            admin_state[ADMIN_ID]["action"] = "task_add_qty"
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid reward amount. рдХреГрдкрдпрд╛ рд╕рд╣реА рд░рд╛рд╢рд┐ enter рдХрд░реЗрдВред")
    
    elif action == "task_add_qty":
        try:
            quantity = int(message.text.strip())
            task_data = state["task_data"]
            task_data["quantity"] = quantity
            task_data["id"] = str(uuid.uuid4())
            task_data["active"] = True
            task_data["completed_count"] = 0
            task_data["created_at"] = time.time()
            
            bot_data = get_bot_data()
            if "tasks" not in bot_data:
                bot_data["tasks"] = []
            bot_data["tasks"].append(task_data)
            save_bot_data(bot_data)
            
            bot.send_message(ADMIN_ID, f"""тЬЕ **Task Successfully Added!**

ЁЯУЭ Title: {task_data['title']}
ЁЯУД Description: {task_data['description']}
ЁЯФЧ Link: {task_data['link']}
ЁЯТ░ Reward: тВ╣{task_data['reward']}
ЁЯУК Quantity: {task_data['quantity']}
тЬЕ Status: Active

Task рдЕрдм users рдХреЛ available рд╣реИ!""")
            
            msg_text = f"ЁЯФФ **New Task Available!**\n\nЁЯУЛ {task_data['title']}\nЁЯУЭ {task_data['description']}\nЁЯТ░ Reward: тВ╣{task_data['reward']}\n\nGet task now: /newtask"
            success, failed = broadcast_notification(msg_text)
            bot.send_message(ADMIN_ID, f"ЁЯУв Notification sent to users!\nтЬЕ Success: {success}\nтЭМ Failed: {failed}")
            
            log_activity(ADMIN_ID, "admin_task_added", {"task_id": task_data["id"], "title": task_data["title"], "reward": task_data["reward"], "notified": success})
            del admin_state[ADMIN_ID]
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid quantity. рдХреГрдкрдпрд╛ рд╕рд╣реА рд╕рдВрдЦреНрдпрд╛ enter рдХрд░реЗрдВред")
    
    elif action == "task_edit_title":
        task_id = state["task_id"]
        new_title = message.text.strip()
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        for task in tasks:
            if task["id"] == task_id:
                old_title = task["title"]
                task["title"] = new_title
                save_bot_data(bot_data)
                bot.send_message(ADMIN_ID, f"тЬЕ Task title updated!\n\nOld: {old_title}\nNew: {new_title}")
                log_activity(ADMIN_ID, "admin_task_edited", {"task_id": task_id, "field": "title", "new_value": new_title})
                break
        del admin_state[ADMIN_ID]
    
    elif action == "task_edit_desc":
        task_id = state["task_id"]
        new_desc = message.text.strip()
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        for task in tasks:
            if task["id"] == task_id:
                task["description"] = new_desc
                save_bot_data(bot_data)
                bot.send_message(ADMIN_ID, f"тЬЕ Task description updated!\n\n{new_desc}")
                log_activity(ADMIN_ID, "admin_task_edited", {"task_id": task_id, "field": "description"})
                break
        del admin_state[ADMIN_ID]
    
    elif action == "task_edit_link":
        task_id = state["task_id"]
        new_link = message.text.strip()
        bot_data = get_bot_data()
        tasks = bot_data.get("tasks", [])
        
        for task in tasks:
            if task["id"] == task_id:
                task["link"] = new_link
                save_bot_data(bot_data)
                bot.send_message(ADMIN_ID, f"тЬЕ Task link updated!\n\n{new_link}")
                log_activity(ADMIN_ID, "admin_task_edited", {"task_id": task_id, "field": "link"})
                break
        del admin_state[ADMIN_ID]
    
    elif action == "task_edit_reward":
        try:
            task_id = state["task_id"]
            new_reward = float(message.text.strip())
            bot_data = get_bot_data()
            tasks = bot_data.get("tasks", [])
            
            for task in tasks:
                if task["id"] == task_id:
                    old_reward = task["reward"]
                    task["reward"] = new_reward
                    save_bot_data(bot_data)
                    bot.send_message(ADMIN_ID, f"тЬЕ Task reward updated!\n\nOld: тВ╣{old_reward}\nNew: тВ╣{new_reward}")
                    log_activity(ADMIN_ID, "admin_task_edited", {"task_id": task_id, "field": "reward", "new_value": new_reward})
                    break
            del admin_state[ADMIN_ID]
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid reward amount. рдХреГрдкрдпрд╛ рд╕рд╣реА рд░рд╛рд╢рд┐ enter рдХрд░реЗрдВред")
            del admin_state[ADMIN_ID]
    
    elif action == "task_edit_qty":
        try:
            task_id = state["task_id"]
            new_qty = int(message.text.strip())
            bot_data = get_bot_data()
            tasks = bot_data.get("tasks", [])
            
            for task in tasks:
                if task["id"] == task_id:
                    old_qty = task.get("quantity", 999999)
                    task["quantity"] = new_qty
                    save_bot_data(bot_data)
                    bot.send_message(ADMIN_ID, f"тЬЕ Task quantity updated!\n\nOld: {old_qty}\nNew: {new_qty}")
                    log_activity(ADMIN_ID, "admin_task_edited", {"task_id": task_id, "field": "quantity", "new_value": new_qty})
                    break
            del admin_state[ADMIN_ID]
        except:
            bot.send_message(ADMIN_ID, "тЭМ Invalid quantity. рдХреГрдкрдпрд╛ рд╕рд╣реА рд╕рдВрдЦреНрдпрд╛ enter рдХрд░реЗрдВред")
            del admin_state[ADMIN_ID]

@bot.message_handler(func=lambda message: message.text and message.text.startswith("ЁЯМР"))
def language_command(message):
    user_id = message.from_user.id
    if is_user_blocked(user_id):
        return
    if not user_exists(user_id):
        bot.reply_to(message, get_message("hindi", "start_first"))
        return
    user_language = get_user_language(user_id)
    keyboard = get_language_keyboard()
    bot.send_message(user_id, get_message(user_language, "select_language"), reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def handle_language_selection(call):
    user_id = call.from_user.id
    language = call.data.split("_")[1]
    set_user_language(user_id, language)
    bot.edit_message_text(get_message(language, "language_changed"), chat_id=call.message.chat.id, message_id=call.message.message_id)
    bot.send_message(user_id, get_message(language, "menu_text"))
    log_activity(user_id, "language_changed", {"language": language})

@bot.message_handler(func=lambda message: message.text and (message.text.startswith("ЁЯОп") or message.text == "ЁЯОп New Task"))
@bot.message_handler(commands=['newtask'])
def new_task_command(message):
    user_id = message.from_user.id
    if is_user_blocked(user_id):
        user_language = get_user_language(user_id)
        bot.reply_to(message, get_message(user_language, "user_blocked"))
        return
    tasks = get_bot_data().get("tasks", [])
    user_data = get_user_data(user_id)
    completed_tasks = user_data.get("completed_tasks", [])
    available_task = None
    for task in tasks:
        if task["id"] not in completed_tasks:
            if task.get("active", True):
                completed_count = task.get("completed_count", 0)
                quantity = task.get("quantity", 999999)
                if completed_count < quantity:
                    available_task = task
                    break
    user_language = get_user_language(user_id)
    if not available_task:
        bot.reply_to(message, get_message(user_language, "no_tasks"))
        return
    current_task = user_data.get("current_task")
    if current_task == available_task["id"]:
        bot.reply_to(message, get_message(user_language, "task_already_active"))
        return
    set_user_current_task(user_id, available_task["id"])
    task_message = get_message(user_language, "task_assigned", title=available_task['title'], description=available_task['description'], link=available_task['link'], reward=available_task['reward'])
    bot.reply_to(message, task_message)
    log_activity(user_id, "task_requested", {"task_id": available_task["id"]})

@bot.message_handler(func=lambda message: message.text and message.text.startswith("ЁЯТ░"))
@bot.message_handler(commands=['balance'])
def balance_command(message):
    user_id = message.from_user.id
    user_language = get_user_language(user_id)
    if is_user_blocked(user_id):
        bot.reply_to(message, get_message(user_language, "user_blocked"))
        return
    user_data = get_user_data(user_id)
    if not user_data:
        bot.reply_to(message, get_message(user_language, "start_first"))
        return
    total_earnings = user_data.get('total_earnings', 0)
    current_balance = user_data.get('balance', 0)
    completed_tasks = len(user_data.get('completed_tasks', []))
    referrals = user_data.get('referrals', 0)
    balance_message = get_message(user_language, "balance_info", balance=current_balance, total_earnings=total_earnings, completed_tasks=completed_tasks, referrals=referrals)
    bot.reply_to(message, balance_message)
    log_activity(user_id, "balance_checked", {"balance": current_balance})

@bot.message_handler(func=lambda message: message.text and message.text.startswith("ЁЯТ╕"))
@bot.message_handler(commands=['withdrawal'])
def withdrawal_command(message):
    user_id = message.from_user.id
    user_language = get_user_language(user_id)
    if is_user_blocked(user_id):
        bot.reply_to(message, get_message(user_language, "user_blocked"))
        return
    user_data = get_user_data(user_id)
    if not user_data:
        bot.reply_to(message, get_message(user_language, "start_first"))
        return
    bot_data = get_bot_data()
    settings = bot_data.get("settings", {})
    min_withdrawal = settings.get("min_withdrawal", MINIMUM_WITHDRAWAL)
    balance = user_data.get('balance', 0)
    if balance < min_withdrawal:
        bot.reply_to(message, get_message(user_language, "insufficient_balance", balance=balance, min_withdrawal=min_withdrawal))
        return
    msg = bot.reply_to(message, get_message(user_language, "enter_upi"))
    bot.register_next_step_handler(msg, process_upi_id, balance)
    log_activity(user_id, "withdrawal_initiated", {"balance": balance})

def process_upi_id(message, balance):
    user_id = message.from_user.id
    upi_id = message.text.strip()
    user_language = get_user_language(user_id)
    if "@" not in upi_id or len(upi_id) < 10:
        bot.reply_to(message, get_message(user_language, "invalid_format"))
        return
    withdrawal_request = {
        "id": str(uuid.uuid4()),
        "user_id": user_id,
        "amount": balance,
        "upi_id": upi_id,
        "timestamp": time.time(),
        "status": "pending"
    }
    add_withdrawal_request(withdrawal_request)
    deduct_user_balance(user_id, balance)
    bot.reply_to(message, get_message(user_language, "withdrawal_submitted", amount=balance, upi_id=upi_id))
    admin_message = f"""ЁЯТ╕ рдирдпрд╛ рдирд┐рдХрд╛рд╕реА рдЕрдиреБрд░реЛрдз

ЁЯСд User ID: {user_id}
ЁЯТ░ Amount: тВ╣{balance}
ЁЯТ│ UPI ID: {upi_id}
ЁЯХР Time: {time.strftime('%Y-%m-%d %H:%M:%S')}

Request ID: {withdrawal_request['id']}"""
    keyboard = types.InlineKeyboardMarkup()
    approve_btn = types.InlineKeyboardButton("тЬЕ Approve Payment", callback_data=f"approve_withdrawal_{withdrawal_request['id']}")
    reject_btn = types.InlineKeyboardButton("тЭМ Reject & Refund", callback_data=f"reject_withdrawal_{withdrawal_request['id']}")
    keyboard.add(approve_btn, reject_btn)
    try:
        bot.send_message(ADMIN_ID, admin_message, reply_markup=keyboard)
    except:
        pass
    log_activity(user_id, "withdrawal_requested", {"amount": balance, "upi_id": upi_id, "request_id": withdrawal_request['id']})

@bot.message_handler(func=lambda message: message.text and message.text.startswith("ЁЯФЧ"))
@bot.message_handler(commands=['refer'])
def refer_command(message):
    user_id = message.from_user.id
    user_language = get_user_language(user_id)
    if is_user_blocked(user_id):
        bot.reply_to(message, get_message(user_language, "user_blocked"))
        return
    user_data = get_user_data(user_id)
    if not user_data:
        bot.reply_to(message, get_message(user_language, "start_first"))
        return
    bot_data = get_bot_data()
    settings = bot_data.get("settings", {})
    bot_username = settings.get("bot_username", BOT_USERNAME)
    
    user_ref_reward = get_user_custom_setting(user_id, "referral_reward", None)
    if user_ref_reward is not None:
        referral_reward = user_ref_reward
    else:
        referral_reward = settings.get("referral_reward", REFERRAL_REWARD)
    
    user_milestone_count = get_user_custom_setting(user_id, "milestone_count", None)
    if user_milestone_count is not None:
        referral_milestone_count = user_milestone_count
    else:
        referral_milestone_count = settings.get("referral_milestone_count", REFERRAL_MILESTONE_COUNT)
    
    user_milestone_reward = get_user_custom_setting(user_id, "milestone_reward", None)
    if user_milestone_reward is not None:
        referral_milestone_reward = user_milestone_reward
    else:
        referral_milestone_reward = settings.get("referral_milestone_reward", REFERRAL_MILESTONE_REWARD)
    
    referral_link = f"https://t.me/{bot_username}?start={user_id}"
    referrals_count = user_data.get('referrals', 0)
    referral_earnings = referrals_count * referral_reward
    refer_message = get_message(user_language, "referral_info", referral_link=referral_link, referrals_count=referrals_count, referral_earnings=referral_earnings, referral_reward=referral_reward, milestone_count=referral_milestone_count, milestone_reward=referral_milestone_reward)
    bot.reply_to(message, refer_message)
    log_activity(user_id, "referral_link_accessed", {"referrals_count": referrals_count})

@bot.message_handler(func=lambda message: message.text and message.text.startswith("тЭУ"))
@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    user_language = get_user_language(user_id)
    bot_data = get_bot_data()
    settings = bot_data.get("settings", {})
    min_withdrawal = settings.get("min_withdrawal", MINIMUM_WITHDRAWAL)
    help_msg = get_message(user_language, "help", min_withdrawal=min_withdrawal)
    bot.reply_to(message, help_msg)
    log_activity(user_id, "help_accessed", {})

@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = message.from_user.id
    user_language = get_user_language(user_id)
    if is_user_blocked(user_id):
        bot.reply_to(message, get_message(user_language, "user_blocked"))
        return
    user_data = get_user_data(user_id)
    if not user_data:
        bot.reply_to(message, get_message(user_language, "start_first"))
        return
    current_task_id = user_data.get('current_task')
    if not current_task_id:
        bot.reply_to(message, get_message(user_language, "no_active_task"))
        return
    tasks = get_bot_data().get("tasks", [])
    current_task = None
    for task in tasks:
        if task["id"] == current_task_id:
            current_task = task
            break
    if not current_task:
        bot.reply_to(message, "тЭМ рдХрд╛рд░реНрдп рдирд╣реАрдВ рдорд┐рд▓рд╛ / Task not found")
        return
    if current_task_id in user_data.get('completed_tasks', []):
        bot.reply_to(message, "тЬЕ рдпрд╣ рдХрд╛рд░реНрдп рдкрд╣рд▓реЗ рд╕реЗ рдкреВрд░рд╛ рд╣реИ\nтЭМ рдПрдХ рдХрд╛рд░реНрдп рдХреЗрд╡рд▓ рдПрдХ рдмрд╛рд░ рд╣реА рдХрд┐рдпрд╛ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИ")
        clear_user_current_task(user_id)
        return
    admin_message = f"""ЁЯУ╕ **рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рд╕рддреНрдпрд╛рдкрди / Screenshot Verification**

ЁЯСд **User Details:**
тАв ID: {user_id}
тАв Name: {message.from_user.first_name}
тАв Username: @{message.from_user.username or 'N/A'}

ЁЯОп **Task Details:**
тАв Title: {current_task['title']}
тАв Reward: тВ╣{current_task['reward']}
тАв Task ID: {current_task_id}

ЁЯХР Submitted: {time.strftime('%Y-%m-%d %H:%M:%S')}"""
    keyboard = types.InlineKeyboardMarkup()
    approve_btn = types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_{user_id}_{current_task_id}")
    reject_btn = types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_{user_id}_{current_task_id}")
    block_btn = types.InlineKeyboardButton("ЁЯЪл Block User", callback_data=f"block_{user_id}")
    keyboard.add(approve_btn, reject_btn)
    keyboard.add(block_btn)
    try:
        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=admin_message, parse_mode='Markdown', reply_markup=keyboard)
    except:
        pass
    bot.reply_to(message, get_message(user_language, "screenshot_submitted"))
    log_activity(user_id, "screenshot_submitted", {"task_id": current_task_id})

@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_', 'block_', 'approve_withdrawal_', 'reject_withdrawal_')))
def handle_verification_callbacks(call):
    if call.from_user.id != ADMIN_ID:
        return
    if call.data.startswith("approve_withdrawal_"):
        request_id = call.data.replace("approve_withdrawal_", "")
        bot_data = get_bot_data()
        withdrawal_requests = bot_data.get("withdrawal_requests", [])
        request = None
        for req in withdrawal_requests:
            if req["id"] == request_id:
                request = req
                break
        if not request:
            bot.edit_message_text("тЭМ Withdrawal request not found", call.message.chat.id, call.message.message_id)
            return
        update_withdrawal_request_status(request_id, "approved")
        bot.edit_message_text(f"тЬЕ **Withdrawal Approved**\n\nЁЯСд User: {request['user_id']}\nЁЯТ░ Amount: тВ╣{request['amount']}\nЁЯТ│ UPI ID: {request['upi_id']}\nЁЯУЕ Date: {request['timestamp']}\nтЬи Payment approved", call.message.chat.id, call.message.message_id)
        try:
            bot.send_message(request['user_id'], f"тЬЕ **рдирд┐рдХрд╛рд╕реА рд╕реНрд╡реАрдХреГрдд**\n\nЁЯТ░ рд░рд╛рд╢рд┐: тВ╣{request['amount']}\nЁЯТ│ UPI ID: {request['upi_id']}\nтЬи рдкреЗрдореЗрдВрдЯ 24-48 рдШрдВрдЯреЗ рдореЗрдВ рдЖрдкрдХреЗ рдЦрд╛рддреЗ рдореЗрдВ рдЖ рдЬрд╛рдПрдЧреА!")
        except:
            pass
        log_activity(ADMIN_ID, "withdrawal_approved", {"request_id": request_id, "user_id": request['user_id'], "amount": request['amount']})
    elif call.data.startswith("reject_withdrawal_"):
        request_id = call.data.replace("reject_withdrawal_", "")
        bot_data = get_bot_data()
        withdrawal_requests = bot_data.get("withdrawal_requests", [])
        request = None
        for req in withdrawal_requests:
            if req["id"] == request_id:
                request = req
                break
        if not request:
            bot.edit_message_text("тЭМ Withdrawal request not found", call.message.chat.id, call.message.message_id)
            return
        add_user_balance(request['user_id'], request['amount'])
        update_withdrawal_request_status(request_id, "rejected")
        bot.edit_message_text(f"тЭМ **Withdrawal Rejected**\n\nUser: {request['user_id']}\nAmount: тВ╣{request['amount']}\nStatus: Rejected and refunded", call.message.chat.id, call.message.message_id)
        try:
            bot.send_message(request['user_id'], f"тЭМ **рдирд┐рдХрд╛рд╕реА рдЕрд╕реНрд╡реАрдХреГрдд**\n\nЁЯТ░ рд░рд╛рд╢рд┐: тВ╣{request['amount']}\nЁЯТ╕ рд░рд╛рд╢рд┐ рд╡рд╛рдкрд╕ рдЖрдкрдХреЗ рдмреИрд▓реЗрдВрд╕ рдореЗрдВ рдЬреЛрдбрд╝ рджреА рдЧрдИ рд╣реИ")
        except:
            pass
        log_activity(ADMIN_ID, "withdrawal_rejected", {"request_id": request_id, "user_id": request['user_id'], "amount": request['amount']})
    else:
        action, user_id, *extra = call.data.split('_')
        user_id = int(user_id)
        if action == "approve":
            task_id = extra[0]
            tasks = get_bot_data().get("tasks", [])
            task = None
            for t in tasks:
                if t["id"] == task_id:
                    task = t
                    break
            if not task:
                bot.edit_message_text("тЭМ Task not found", call.message.chat.id, call.message.message_id)
                return
            add_user_balance(user_id, task["reward"])
            add_completed_task(user_id, task_id)
            clear_user_current_task(user_id)
            bot_data = get_bot_data()
            tasks = bot_data.get("tasks", [])
            for i, t in enumerate(tasks):
                if t["id"] == task_id:
                    tasks[i]["completed_count"] = t.get("completed_count", 0) + 1
                    break
            bot_data["tasks"] = tasks
            save_bot_data(bot_data)
            bot.edit_message_caption(caption=f"тЬЕ **Task Approved**\n\nUser: {user_id}\nTask: {task['title']}\nReward: тВ╣{task['reward']}\nStatus: Approved", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(user_id, f"тЬЕ **рдХрд╛рд░реНрдп рд╕реНрд╡реАрдХреГрдд / Task Approved**\n\nЁЯОп рдХрд╛рд░реНрдп: {task['title']}\nЁЯТ░ рд░рд┐рд╡реЙрд░реНрдб: тВ╣{task['reward']}\nтЬи рдЖрдкрдХреЗ рдЦрд╛рддреЗ рдореЗрдВ рд░рд╛рд╢рд┐ рдЬреЛрдбрд╝ рджреА рдЧрдИ рд╣реИ!", parse_mode='Markdown')
            except:
                pass
            log_activity(user_id, "task_approved", {"task_id": task_id, "reward": task["reward"], "approved_by": ADMIN_ID})
        elif action == "reject":
            task_id = extra[0]
            tasks = get_bot_data().get("tasks", [])
            task = None
            for t in tasks:
                if t["id"] == task_id:
                    task = t
                    break
            if not task:
                bot.edit_message_text("тЭМ Task not found", call.message.chat.id, call.message.message_id)
                return
            deduct_user_balance(user_id, task["reward"])
            clear_user_current_task(user_id)
            bot.edit_message_caption(caption=f"тЭМ **Task Rejected**\n\nUser: {user_id}\nTask: {task['title']}\nPenalty: тВ╣{task['reward']} deducted", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(user_id, f"тЭМ **рдХрд╛рд░реНрдп рдЕрд╕реНрд╡реАрдХреГрдд / Task Rejected**\n\nЁЯОп рдХрд╛рд░реНрдп: {task['title']}\nЁЯТ╕ рджрдВрдб: тВ╣{task['reward']}\nтЪая╕П рдирдХрд▓реА рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рдХреЗ рд▓рд┐рдП рд░рд╛рд╢рд┐ рдХрд╛рдЯреА рдЧрдИ рд╣реИ", parse_mode='Markdown')
            except:
                pass
            log_activity(user_id, "task_rejected", {"task_id": task_id, "penalty": task["reward"], "rejected_by": ADMIN_ID})
        elif action == "block":
            block_user(user_id)
            bot.edit_message_caption(caption=f"ЁЯЪл **User Blocked**\n\nUser ID: {user_id}\nStatus: Blocked by admin", chat_id=call.message.chat.id, message_id=call.message.message_id, parse_mode='Markdown')
            try:
                bot.send_message(user_id, "ЁЯЪл **рдЦрд╛рддрд╛ рдмрдВрдж / Account Blocked**\n\nрдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рдирдХрд▓реА рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬрдиреЗ рдХреЗ рдХрд╛рд░рдг рдмрдВрдж рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")
            except:
                pass
            log_activity(user_id, "user_blocked", {"blocked_by": ADMIN_ID})

@bot.message_handler(func=lambda message: message.text.startswith('/') and message.text not in ['/start', '/newtask', '/balance', '/withdrawal', '/refer', '/help', '/admin'])
def handle_unknown_commands(message):
    log_activity(message.from_user.id, "unknown_command", {"text": message.text})
    bot.reply_to(message, "тЭМ рдпрд╣ рдХрдорд╛рдВрдб рдорд╛рдиреНрдп рдирд╣реАрдВ рд╣реИ / This command is not valid\n\nтЬЕ рд╡реИрдз рдХрдорд╛рдВрдб / Valid commands:\nтАв /start - рдореЗрдиреВ / Menu\nтАв ЁЯОп рдирдпрд╛ рдХрд╛рд░реНрдп / New Task\nтАв ЁЯТ░ рдмреИрд▓реЗрдВрд╕ / Balance\nтАв ЁЯТ╕ рдирд┐рдХрд╛рд╕реА / Withdrawal\nтАв ЁЯФЧ рд░реЗрдлрд░ / Refer\nтАв тЭУ рд╕рд╣рд╛рдпрддрд╛ / Help")

@bot.message_handler(content_types=['text'])
def handle_text_messages(message):
    if not message.text.startswith('/'):
        log_activity(message.from_user.id, "text_message", {"text": message.text[:50]})
        bot.reply_to(message, "ЁЯУЛ рдореЗрдиреВ рдХреЗ рд▓рд┐рдП /start рджрдмрд╛рдПрдВ рдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ\nPress /start for menu or use the buttons below")

def self_ping_loop():
    while True:
        try:
            time.sleep(120)
            try:
                endpoints = ["/ping", "/status", "/alive"]
                for endpoint in endpoints:
                    requests.get(f"http://127.0.0.1:5000{endpoint}", timeout=10)
                    time.sleep(1)
                print(f"Deployment ping: {time.strftime('%H:%M:%S')}")
            except:
                pass
        except:
            pass

def heartbeat_loop():
    while True:
        try:
            time.sleep(240)
            print(f"Heartbeat: {time.strftime('%H:%M:%S')}")
        except:
            time.sleep(60)

if __name__ == "__main__":
    print("ЁЯдЦ Bot starting...")
    log_activity(0, "bot_started", {"timestamp": time.time()})
    print("ЁЯМР Starting keep-alive server...")
    keep_alive()
    time.sleep(3)
    ping_thread = threading.Thread(target=self_ping_loop, daemon=True)
    ping_thread.start()
    heartbeat_thread = threading.Thread(target=heartbeat_loop, daemon=True)
    heartbeat_thread.start()
    try:
        bot.delete_webhook(drop_pending_updates=True)
        print("тЬЕ Webhook deleted successfully")
        time.sleep(5)
    except Exception as e:
        print(f"тЪая╕П Webhook deletion failed: {e}")
    while True:
        try:
            print("ЁЯФД Starting bot polling...")
            bot.polling(none_stop=True, interval=2, timeout=30)
            break
        except Exception as e:
            error_msg = str(e).lower()
            print(f"тЭМ Bot error: {e}")
            if "409" in error_msg or "conflict" in error_msg:
                print("ЁЯФД Resolving conflict...")
                try:
                    for i in range(3):
                        bot.delete_webhook(drop_pending_updates=True)
                        time.sleep(3)
                        requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset=-1&limit=1", timeout=10)
                        time.sleep(2)
                    print("тЬЕ Conflict resolved, restarting...")
                    time.sleep(15)
                except Exception as clear_error:
                    print(f"Clear error: {clear_error}")
                    time.sleep(20)
            else:
                log_activity(0, "bot_error", {"error": str(e)})
                time.sleep(15)
